{"version":3,"sources":["modules/formControl.js","modules/alert.js","modules/collapse.js","modules/main.js","modules/modal.js","modules/spinner.js","modules/xhrPromise.js","modules/mediaUpload.js","media.js"],"names":["enableFormControl","control","disabled","disableFormControl","alertContainer","document","querySelector","dismissAlertInlineMessage","event","target","dataset","dismiss","closest","remove","alertInlineMessage","severity","heading","message","container","createElement","innerHTML","pitonConfig","alertInlineHTML","classList","add","join","insertAdjacentHTML","window","scrollTo","collapseToggle","collapse","collapseTarget","toggle","querySelectorAll","forEach","form","saveButtons","addEventListener","e","confirm","preventDefault","deletePrompt","modal","getElementById","getModal","showModal","showModalContent","header","body","hideModal","enableSpinner","contains","disableSpinner","XHRPromise","method","url","data","xhr","XMLHttpRequest","Promise","resolve","reject","response","onreadystatechange","readyState","DONE","status","JSON","parse","responseText","text","error","open","setRequestHeader","send","getXHRPromise","queryString","URLSearchParams","Object","entries","key","value","append","toString","postXHRPromise","formData","FormData","csrfTokenName","csrfTokenValue","refreshPageOnUpload","showMediaUploadForm","routes","adminMediaUploadFormGet","then","mediaUpload","adminMediaUploadFile","location","reload","catch","console","log","upload","saveMedia","formButton","adminMediaSave","deleteMedia","deleteMediaPrompt","mediaId","adminMediaDelete"],"mappings":"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","file":"media.js","sourceRoot":"..","sourcesContent":["/**\n * Enable Form Control\n *\n * @param {object} control Control button element\n */\nconst enableFormControl = function(control) {\n    if (control && control.disabled) {\n        control.disabled = false;\n    }\n}\n\n/**\n * Disable Form Control\n *\n * @param {object} control Control button element\n */\nconst disableFormControl =  function(control) {\n    if (control && !control.disabled) {\n        control.disabled = true;\n    }\n}\n\nexport { enableFormControl, disableFormControl };","\nconst alertContainer = document.querySelector(`[data-alert-modal=\"1\"]`);\n\n/**\n * Dismiss Inline Alert\n * @param {Event} event\n */\nconst dismissAlertInlineMessage = function(event) {\n    if (event.target.dataset.dismiss === \"alert\") {\n        event.target.closest(`[data-alert=\"container\"]`).remove();\n    }\n}\n\n/**\n * Display Inline HTML Message Alert\n * @param {string} severity Severity color code\n * @param {string} heading  Message heading\n * @param {mixed} message   Message list\n */\nconst alertInlineMessage = function(severity, heading, message) {\n    // Create element and insert alert HTML and update with alert data\n    let container = document.createElement(\"div\");\n    container.innerHTML = pitonConfig.alertInlineHTML;\n    container.querySelector(`[data-alert=\"container\"]`).classList.add(\"alert-\" + severity);\n    container.querySelector(`[data-alert=\"heading\"]`).innerHTML = heading;\n\n    // Stringify message\n    if (typeof message === 'object') {\n        message = message.join(\"<br>\");\n    } else if (typeof message === 'undefined') {\n        message = \"\";\n    }\n\n    container.querySelector(`[data-alert=\"content\"]`).innerHTML = message;\n\n    // Insert into modal-alert container\n    alertContainer.insertAdjacentHTML('afterbegin', container.innerHTML);\n    window.scrollTo(0,0);\n}\n\nexport { alertInlineMessage, dismissAlertInlineMessage };","/**\n * Collapse Toggle\n * @param {Event} event\n */\nconst collapseToggle = function(event) {\n    if (event.target.dataset.collapse === 'toggle') {\n        let collapseTarget = event.target.closest(`[data-collapse=\"parent\"]`).querySelector(`[data-collapse=\"target\"]`);\n\n        if (collapseTarget) {\n            collapseTarget.classList.toggle(\"collapsed\");\n        }\n    }\n}\n\nexport { collapseToggle };","// --------------------------------------------------------\n// Main JS\n// --------------------------------------------------------\n\nimport { enableFormControl, disableFormControl } from './formControl.js';\nimport { dismissAlertInlineMessage } from './alert.js';\nimport { collapseToggle } from './collapse.js';\n\n// Form Control Events\ndocument.querySelectorAll(\"form\").forEach(form => {\n    // Disable form controls and listen for form input changes to re-enable save controls\n    let saveButtons = form.querySelectorAll(`[data-form-button=\"save\"]`);\n    if (saveButtons) {\n        saveButtons.forEach(control => {\n            disableFormControl(control);\n        });\n\n        // Listen for form changes to reenable controls\n        form.addEventListener(\"input\", (e) => {\n            saveButtons.forEach(control => {\n                enableFormControl(control);\n            });\n        }, false);\n    }\n\n    // Confirm discard of changes\n    form.querySelectorAll(`[data-form-button=\"cancel\"]`).forEach(control => {\n        control.addEventListener(\"click\", (e) => {\n            let userResponse = confirm(\"Click Ok to discard your changes, or cancel continue editing?\");\n            if (!userResponse) e.preventDefault();\n        }, false);\n    });\n\n    // Confirm delete\n    form.querySelectorAll(`[data-delete-prompt]`).forEach(control => {\n        control.addEventListener(\"click\", (e) => {\n            if (!confirm(e.target.dataset.deletePrompt)) e.preventDefault();\n        }, false);\n    });\n});\n\n// Binding click events to document\ndocument.addEventListener(\"click\", dismissAlertInlineMessage, false);\ndocument.addEventListener(\"click\", collapseToggle, false);","// Get base modal HTML available in all pages\nconst modal = document.getElementById(\"modal\");\n\n/**\n * Get Modal\n * Returns modal object\n */\nconst getModal = function() {\n    return modal;\n}\n\n/**\n * Show Modal (Background)\n * Call first if request requires processing time before content is available\n */\nconst showModal = function() {\n    modal.classList.remove(\"d-none\");\n}\n\n/**\n * Load Modal Content and Display\n * @param {string} header\n * @param {string} body\n */\nconst showModalContent = function(header, body) {\n    // Assign modal header and content\n    modal.querySelector(`[data-modal=\"header\"]`).innerHTML = header;\n    modal.querySelector(`[data-modal=\"body\"]`).innerHTML = body;\n\n    // Remove d-none to display\n    modal.classList.remove(\"d-none\");\n    modal.querySelector(`[data-modal=\"content\"]`).classList.remove(\"d-none\");\n}\n\n/**\n * Hide Modal and Clear Contents\n */\nconst hideModal = function() {\n    modal.classList.add(\"d-none\");\n    modal.querySelector(`[data-modal=\"content\"]`).classList.add(\"d-none\");\n    modal.querySelector(`[data-modal=\"header\"]`).innerHTML = \"\";\n    modal.querySelector(`[data-modal=\"body\"]`).innerHTML = \"\";\n}\n\n// Bind close modal events\nmodal.querySelector(`[data-dismiss=\"modal\"]`).addEventListener(\"click\", () => {\n    hideModal();\n}, false);\n\nwindow.addEventListener(\"click\", (event) => {\n    if (event.target === modal) {\n        hideModal();\n    }\n}, false);\n\nexport { getModal, showModal, showModalContent, hideModal };\n","/**\n * Enable Spinner Overlay\n * @param {void}\n */\nconst enableSpinner = function() {\n    if (document.querySelector(\"body > .spinner\").classList.contains(\"d-none\")) {\n        document.querySelector(\"body > .spinner\").classList.remove(\"d-none\")\n    }\n}\n\n/**\n * Disable Spinner Overlay\n * @param {void}\n */\nconst disableSpinner = function() {\n    if (!document.querySelector(\"body > .spinner\").classList.contains(\"d-none\")) {\n        document.querySelector(\"body > .spinner\").classList.add(\"d-none\")\n    }\n}\n\nexport { enableSpinner, disableSpinner };","import { alertInlineMessage } from './alert.js';\nimport { disableSpinner } from './spinner.js';\n\n/**\n * XHR Request Promise\n * @param {string} method \"GET\"|\"POST\"\n * @param {string} url    Resource request URL\n * @param {FormData} data   FormData payload to send\n */\nconst XHRPromise = function(method, url, data) {\n    let xhr = new XMLHttpRequest();\n\n    return new Promise((resolve, reject) => {\n\n        let response;\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState !== XMLHttpRequest.DONE) return;\n\n            try {\n                if (xhr.status === 200) {\n                    // Successful server response\n                    response = JSON.parse(xhr.responseText);\n\n                    if (response.status === \"success\") {\n                        // Response successful, resolve\n                        resolve(response.text);\n                        disableSpinner();\n                    } else {\n                        // Response successful but application failed, reject and alert\n                        reject();\n                        alertInlineMessage('danger', 'Piton Error', [response.text]);\n                        disableSpinner();\n                    }\n                } else {\n                    // Failed server runtime response\n                    reject(response.text);\n                    alertInlineMessage('danger', 'Server Error ' + response.status, [response.text]);\n                    disableSpinner();\n                }\n            } catch (error) {\n                // JS Error thrown\n                reject(error);\n                alertInlineMessage('danger', 'Exception', [error]);\n                disableSpinner();\n            }\n        }\n\n        // Setup and send\n        xhr.open(method, url, true);\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        xhr.send(data);\n    });\n}\n\n/**\n * GET XHR Promise Request\n * @param {string} url  Resource URL\n * @param {object} data Object with query string parameters as key: values\n */\nconst getXHRPromise = function(url, data) {\n    // Create query string if a data object was provided\n    if (data) {\n        let queryString;\n        if (data instanceof URLSearchParams) {\n            queryString = data;\n        } else {\n            queryString = new URLSearchParams();\n            for (let [key, value] of Object.entries(data)) {\n                queryString.append(key, value);\n            }\n        }\n\n        url += \"?\" + queryString.toString();\n    }\n\n    return XHRPromise(\"GET\", url);\n}\n\n/**\n * POST XHR Promise Request\n * @param {string} url  Resource URL\n * @param {object} data Object with key: values, or FormData instance\n */\nconst postXHRPromise = function(url, data) {\n    let formData;\n    if (data instanceof FormData) {\n        formData = data;\n    } else {\n        formData = new FormData();\n        for (let [key, value] of Object.entries(data)) {\n            formData.append(key, value);\n        }\n    }\n\n    formData.append(pitonConfig.csrfTokenName, pitonConfig.csrfTokenValue);\n\n    return XHRPromise(\"POST\", url,  formData);\n}\n\nexport { getXHRPromise, postXHRPromise };\n","// --------------------------------------------------------\n// Upload media\n// --------------------------------------------------------\n\nimport { showModal, showModalContent, hideModal } from './modal.js';\nimport { enableSpinner, disableSpinner } from './spinner.js';\nimport { getXHRPromise, postXHRPromise } from './xhrPromise.js';\nimport { alertInlineMessage } from './alert.js';\n\n// Flag to reload page after upload, or asynchronously\nconst refreshPageOnUpload = document.querySelector(`[data-media-refresh=\"true\"]`) ? true : false;\n\n/**\n * Show Media Upload Form in Modal\n */\nconst showMediaUploadForm = function() {\n    // Get file upload form with most current list of categories\n    showModal();\n    getXHRPromise(pitonConfig.routes.adminMediaUploadFormGet)\n        .then(data => {\n            showModalContent(\"Upload Media\", data);\n        });\n}\n\n/**\n * Media Upload\n * @param {Event} event\n */\nconst mediaUpload = function(event) {\n    if (event.target.dataset.mediaUpload !== \"file\") return;\n\n    enableSpinner();\n    const form = document.querySelector(`form[data-media-upload=\"form\"]`);\n\n    postXHRPromise(pitonConfig.routes.adminMediaUploadFile, new FormData(form))\n        .then(() => {\n            if (refreshPageOnUpload) {\n                window.location.reload();\n            }\n        })\n        .then(() => {\n            hideModal();\n        })\n        .then(() => {\n            disableSpinner();\n        })\n        .catch((text) => {\n            console.log(\"Failed to upload file: \", text);\n            alertInlineMessage('danger', 'Failed to Upload File', text);\n            hideModal();\n            disableSpinner();\n        });\n}\n\n// Bind page events\ndocument.addEventListener(\"click\", mediaUpload, false);\ndocument.querySelectorAll(`[data-media-upload=\"form\"]`)?.forEach(upload => {\n    upload.addEventListener(\"click\", showMediaUploadForm, false);\n});\n","// --------------------------------------------------------\n// Media management\n// --------------------------------------------------------\n\nimport './modules/main.js';\nimport './modules/mediaUpload.js';\nimport { enableSpinner, disableSpinner } from './modules/spinner.js';\nimport { postXHRPromise } from './modules/xhrPromise.js';\nimport { alertInlineMessage } from './modules/alert.js';\n\n/**\n * Save Media\n * @param {Event} event\n */\nconst saveMedia = function(event) {\n    if (event.target.dataset.formButton !== \"save\") return;\n    const form = event.target.closest(\"form\");\n\n    postXHRPromise(pitonConfig.routes.adminMediaSave, new FormData(form))\n        .then(() => {\n            // Show save complete by disabling save button again\n            let button = form.querySelector(`[data-form-button=\"save\"]`);\n            button.disabled = true;\n        })\n        .then(() => {\n            disableSpinner();\n        })\n        .catch((text) => {\n            console.log(\"Failed to save media: \", text);\n            alertInlineMessage('danger', 'Failed to Save Media', text);\n            disableSpinner();\n        });\n}\n\nconst deleteMedia = function(event) {\n    if (!event.target.dataset.deleteMediaPrompt) return;\n    if (!confirm(event.target.dataset.deleteMediaPrompt)) return;\n\n    const form = event.target.closest(\".media\");\n    let mediaId = event.target.dataset.mediaId;\n\n    enableSpinner();\n    postXHRPromise(pitonConfig.routes.adminMediaDelete, {\"media_id\": mediaId})\n        .then(() => {\n            form.remove();\n        })\n        .catch((text) => {\n            console.log(\"Failed to delete media: \", text);\n        });\n}\n\ndocument.addEventListener(\"click\", saveMedia, false);\ndocument.addEventListener(\"click\", deleteMedia, false);\n"]}