{"version":3,"sources":["modules/formControl.js","modules/alert.js","modules/collapse.js","modules/main.js","modules/spinner.js","modules/xhrPromise.js","modules/filter.js","messages.js"],"names":["enableFormControl","control","disabled","disableFormControl","alertContainer","document","querySelector","dismissAlertInlineMessage","event","target","dataset","dismiss","closest","remove","alertInlineMessage","severity","heading","message","container","createElement","innerHTML","pitonConfig","alertInlineHTML","classList","add","join","insertAdjacentHTML","window","scrollTo","collapseToggle","collapse","collapseTarget","toggle","querySelectorAll","forEach","form","saveButtons","addEventListener","e","confirm","preventDefault","deletePrompt","enableSpinner","contains","disableSpinner","XHRPromise","method","url","data","xhr","XMLHttpRequest","Promise","resolve","reject","response","onreadystatechange","readyState","DONE","status","JSON","parse","responseText","text","error","open","setRequestHeader","send","getXHRPromise","Object","queryString","URLSearchParams","entries","key","value","append","toString","postXHRPromise","formData","FormData","csrfTokenName","csrfTokenValue","filterPath","filterResults","removeRows","firstChild","removeChild","lastChild","clearFilterControl","filterControl","input","checked","ApplyFilterControl","applyFilters","filters","selectedOptions","hasOwnProperty","name","then","setFilterPath","route","routes","adminMessageGet","updateUnreadMessageCount","updateMessage","messageControl","messageParent","messageId","messageDeletePrompt","adminMessageSave"],"mappings":"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","file":"messages.js","sourceRoot":"..","sourcesContent":["/**\n * Enable Form Control\n *\n * @param {object} control Control button element\n */\nconst enableFormControl = function(control) {\n    if (control && control.disabled) {\n        control.disabled = false;\n    }\n}\n\n/**\n * Disable Form Control\n *\n * @param {object} control Control button element\n */\nconst disableFormControl =  function(control) {\n    if (control && !control.disabled) {\n        control.disabled = true;\n    }\n}\n\nexport { enableFormControl, disableFormControl };","\nconst alertContainer = document.querySelector(`[data-alert-modal=\"1\"]`);\n\n/**\n * Dismiss Inline Alert\n * @param {Event} event\n */\nconst dismissAlertInlineMessage = function(event) {\n    if (event.target.dataset.dismiss === \"alert\") {\n        event.target.closest(`[data-alert=\"container\"]`).remove();\n    }\n}\n\n/**\n * Display Inline HTML Message Alert\n * @param {string} severity Severity color code\n * @param {string} heading  Message heading\n * @param {mixed} message   Message list\n */\nconst alertInlineMessage = function(severity, heading, message) {\n    // Create element and insert alert HTML and update with alert data\n    let container = document.createElement(\"div\");\n    container.innerHTML = pitonConfig.alertInlineHTML;\n    container.querySelector(`[data-alert=\"container\"]`).classList.add(\"alert-\" + severity);\n    container.querySelector(`[data-alert=\"heading\"]`).innerHTML = heading;\n\n    // Stringify message\n    if (typeof message === 'object') {\n        message = message.join(\"<br>\");\n    } else if (typeof message === 'undefined') {\n        message = \"\";\n    }\n\n    container.querySelector(`[data-alert=\"content\"]`).innerHTML = message;\n\n    // Insert into modal-alert container\n    alertContainer.insertAdjacentHTML('afterbegin', container.innerHTML);\n    window.scrollTo(0,0);\n}\n\nexport { alertInlineMessage, dismissAlertInlineMessage };","/**\n * Collapse Toggle\n * @param {Event} event\n */\nconst collapseToggle = function(event) {\n    if (event.target.dataset.collapse === 'toggle') {\n        let collapseTarget = event.target.closest(`[data-collapse=\"parent\"]`).querySelector(`[data-collapse=\"target\"]`);\n\n        if (collapseTarget) {\n            collapseTarget.classList.toggle(\"collapsed\");\n        }\n    }\n}\n\nexport { collapseToggle };","// --------------------------------------------------------\n// Main JS\n// --------------------------------------------------------\n\nimport { enableFormControl, disableFormControl } from './formControl.js';\nimport { dismissAlertInlineMessage } from './alert.js';\nimport { collapseToggle } from './collapse.js';\n\n// Form Control Events\ndocument.querySelectorAll(\"form\").forEach(form => {\n    // Disable form controls and listen for form input changes to re-enable save controls\n    let saveButtons = form.querySelectorAll(`[data-form-button=\"save\"]`);\n    if (saveButtons) {\n        saveButtons.forEach(control => {\n            disableFormControl(control);\n        });\n\n        // Listen for form changes to reenable controls\n        form.addEventListener(\"input\", (e) => {\n            saveButtons.forEach(control => {\n                enableFormControl(control);\n            });\n        }, false);\n    }\n\n    // Confirm discard of changes\n    form.querySelectorAll(`[data-form-button=\"cancel\"]`).forEach(control => {\n        control.addEventListener(\"click\", (e) => {\n            let userResponse = confirm(\"Click Ok to discard your changes, or cancel continue editing?\");\n            if (!userResponse) e.preventDefault();\n        }, false);\n    });\n\n    // Confirm delete\n    form.querySelectorAll(`[data-delete-prompt]`).forEach(control => {\n        control.addEventListener(\"click\", (e) => {\n            if (!confirm(e.target.dataset.deletePrompt)) e.preventDefault();\n        }, false);\n    });\n});\n\n// Binding click events to document\ndocument.addEventListener(\"click\", dismissAlertInlineMessage, false);\ndocument.addEventListener(\"click\", collapseToggle, false);","/**\n * Enable Spinner Overlay\n * @param {void}\n */\nconst enableSpinner = function() {\n    if (document.querySelector(\"body > .spinner\").classList.contains(\"d-none\")) {\n        document.querySelector(\"body > .spinner\").classList.remove(\"d-none\")\n    }\n}\n\n/**\n * Disable Spinner Overlay\n * @param {void}\n */\nconst disableSpinner = function() {\n    if (!document.querySelector(\"body > .spinner\").classList.contains(\"d-none\")) {\n        document.querySelector(\"body > .spinner\").classList.add(\"d-none\")\n    }\n}\n\nexport { enableSpinner, disableSpinner };","import { alertInlineMessage } from './alert.js';\nimport { disableSpinner } from './spinner.js';\n\n/**\n * XHR Request Promise\n * @param {string} method \"GET\"|\"POST\"\n * @param {string} url    Resource request URL\n * @param {FormData} data   FormData payload to send\n */\nconst XHRPromise = function(method, url, data) {\n    let xhr = new XMLHttpRequest();\n\n    return new Promise((resolve, reject) => {\n\n        let response;\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState !== XMLHttpRequest.DONE) return;\n\n            try {\n                if (xhr.status === 200) {\n                    // Successful server response\n                    response = JSON.parse(xhr.responseText);\n\n                    if (response.status === \"success\") {\n                        // Response successful, resolve\n                        resolve(response.text);\n                        disableSpinner();\n                    } else {\n                        // Response successful but application failed, reject and alert\n                        reject();\n                        alertInlineMessage('danger', 'Piton Error', [response.text]);\n                        disableSpinner();\n                    }\n                } else {\n                    // Failed server runtime response\n                    reject(response.text);\n                    alertInlineMessage('danger', 'Server Error ' + response.status, [response.text]);\n                    disableSpinner();\n                }\n            } catch (error) {\n                // JS Error thrown\n                reject(error);\n                alertInlineMessage('danger', 'Exception', [error]);\n                disableSpinner();\n            }\n        }\n\n        // Setup and send\n        xhr.open(method, url, true);\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        xhr.send(data);\n    });\n}\n\n/**\n * GET XHR Promise Request\n * @param {string} url  Resource URL\n * @param {object} data Object with query string parameters as key: values\n */\nconst getXHRPromise = function(url, data) {\n\n    // Create query string if a data object was provided\n    if (data) {\n        let queryString = new URLSearchParams();\n        for (let [key, value] of Object.entries(data)) {\n            queryString.append(key, value);\n        }\n        url += \"?\" + queryString.toString();\n    }\n\n    return XHRPromise(\"GET\", url);\n}\n\n/**\n * POST XHR Promise Request\n * @param {string} url  Resource URL\n * @param {object} data Object with key: values, or FormData instance\n */\nconst postXHRPromise = function(url, data) {\n    let formData;\n    if (data instanceof FormData) {\n        formData = data;\n    } else {\n        formData = new FormData();\n        for (let [key, value] of Object.entries(data)) {\n            formData.append(key, value);\n        }\n    }\n\n    formData.append(pitonConfig.csrfTokenName, pitonConfig.csrfTokenValue);\n\n    return XHRPromise(\"POST\", url,  formData);\n}\n\nexport { getXHRPromise, postXHRPromise };\n","/**\n * Filter Controls for Results Sets\n */\nimport { enableSpinner, disableSpinner } from './spinner.js';\nimport { getXHRPromise } from './xhrPromise.js';\n\n// Expect one content wrapper per page for result set\nconst filterResults = document.querySelector(`[data-filter=\"content\"]`);\nlet filterPath;\n\n/**\n * Remove Rows\n * Clears result set\n */\nconst removeRows = function() {\n    if (filterResults) {\n        while (filterResults.firstChild) {\n            filterResults.removeChild(filterResults.lastChild);\n        }\n    }\n}\n\n/**\n * Clear This Filter Control\n * Resets the current filter, but not others on page\n * @param {Event} event\n */\nconst clearFilterControl = function(event) {\n    if (event.target.dataset.filterControl === \"clear\") {\n        let filter = event.target.closest(`[data-filter=\"options\"]`);\n        filter.querySelectorAll(\"input\").forEach(input => {\n            input.checked = false;\n        });\n    }\n}\n\n/**\n * Apply Filter Control\n * @param {Event} event\n */\nconst ApplyFilterControl = function(event) {\n    if (filterPath && filterResults && event.target.dataset.filterControl === \"apply\") {\n        applyFilters();\n    }\n}\n\n/**\n * Apply Filters\n * Applies all filters on page as single XHR request\n */\nconst applyFilters = function() {\n    let filters = document.querySelectorAll(`[data-filter=\"options\"] input`);\n    let selectedOptions = {};\n    enableSpinner();\n\n    // Get filter options\n    filters.forEach((input) => {\n        if (input.checked) {\n            // Check if this property has already been set, in which case concatenate value\n            if (selectedOptions.hasOwnProperty(input.name)) {\n                selectedOptions[input.name] += \",\" + input.value;\n            } else {\n                selectedOptions[input.name] = input.value;\n            }\n        }\n    });\n\n    getXHRPromise(filterPath, selectedOptions)\n        .then((data) => {\n            removeRows();\n            return data;\n        })\n        .then(data => {\n            filterResults.insertAdjacentHTML('afterbegin', data);\n        })\n        .then(() => {\n            disableSpinner();\n        });\n}\n\n/**\n * Route to Request\n * @param {string} route\n */\nconst setFilterPath = function(route) {\n    filterPath = route;\n}\n\n// Bind events\ndocument.addEventListener(\"click\", ApplyFilterControl, false);\ndocument.addEventListener(\"click\", clearFilterControl, false);\n\nexport { setFilterPath, applyFilters };","// --------------------------------------------------------\n// Message management\n// --------------------------------------------------------\nimport \"./modules/main.js\";\nimport { setFilterPath, applyFilters } from \"./modules/filter.js\";\nimport { postXHRPromise } from \"./modules/xhrPromise.js\";\nimport { disableSpinner, enableSpinner } from \"./modules/spinner.js\";\n\nsetFilterPath(pitonConfig.routes.adminMessageGet);\n\n/**\n * Update Unread Message Count in Sidebar\n */\nconst updateUnreadMessageCount = function() {\n\n}\n\n/**\n * Update Message\n * For Read, Archive status toggle, and Delete\n * @param {Event} event\n */\nconst updateMessage = function (event) {\n    if (!event.target.dataset.messageControl) return;\n\n    let messageParent = event.target.closest(`[data-message=\"parent\"]`);\n    let data = {\"messageId\": messageParent.dataset.messageId};\n\n    // Process control request\n    if (event.target.dataset.messageControl === 'delete') {\n        // Message delete\n        if (!confirm(event.target.dataset.messageDeletePrompt)) return;\n        data[\"control\"] = \"delete\";\n    } else if (event.target.dataset.messageControl === 'archive') {\n        // Toggle archive\n        data[\"control\"] = \"archive\";\n    } else if (event.target.dataset.messageControl === 'read') {\n        // Toggle read\n        data[\"control\"] = \"read\";\n    }\n\n    enableSpinner();\n    postXHRPromise(pitonConfig.routes.adminMessageSave, data)\n        .then(() => {\n            applyFilters();\n        })\n        .then(() => {\n            disableSpinner();\n        });\n}\n\n// Bind event handlers to page\ndocument.addEventListener(\"click\", updateMessage, false);\n\n/*\n// +/- Message count\nlet changeMessageCount = (sign) => {\n    if (sign) {\n        let count = parseInt($('.jsMessageCount').html() || 0);\n        if ('+' === sign) {\n            count++\n        } else if ('-' === sign) {\n            if (--count == 0) count = null;\n        }\n        $('.jsMessageCount').html(count);\n    }\n}\nlet removeMessage = ($message, sign) => {\n    $message.slideUp(function () {\n        $message.remove();\n    });\n    changeMessageCount(sign);\n}\n$('.jsMessageWrap').on('click', 'button', function (e) {\n    e.preventDefault();\n    let request = $(e.target).attr('value');\n    if ('delete' === request && !confirm()) {\n        return false;\n    }\n    let isRead = $(e.target).data('isRead');\n    let $message = $(e.target).parents('.jsMessageWrap');\n    let postData = $message.find('form').serialize();\n    $.ajax({\n        url: (request == 'delete') ? pitonConfig.routes.adminMessageDelete : pitonConfig.routes.adminMessageSave,\n        method: \"POST\",\n        data: postData,\n        success: function (r) {\n            if (r.status === \"success\") {\n                if ('toggle' === request) {\n                    let updown = (isRead === 'Y') ? '+' : '-';\n                    removeMessage($message, updown);\n                } else if ('delete' === request) {\n                    let updown = (isRead === 'N') ? '-' : undefined;\n                    removeMessage($message, updown);\n                }\n            }\n        },\n        error: function (r) {\n            console.log('PitonCMS: There was an error submitting the form. Contact your administrator.')\n        }\n    });\n});\n*/\n"]}