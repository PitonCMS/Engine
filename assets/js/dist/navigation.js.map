{"version":3,"sources":["modules/formControl.js","modules/alert.js","modules/collapse.js","modules/main.js","modules/spinner.js","modules/drag.js","modules/xhrPromise.js","navigation.js"],"names":["enableFormControl","control","disabled","disableFormControl","dismissAlertInlineMessage","event","target","dataset","dismiss","closest","remove","alertInlineMessage","severity","heading","message","container","document","createElement","innerHTML","pitonConfig","alertInlineHTML","querySelector","classList","add","join","insertAdjacentHTML","window","scrollTo","collapseToggle","collapse","collapseTarget","toggle","querySelectorAll","forEach","form","saveButtons","addEventListener","e","confirm","preventDefault","deletePrompt","enableSpinner","contains","disableSpinner","movedElement","inputEvent","Event","dropZone","getMovedElement","dragStartHandler","dataTransfer","setData","dropEffect","setTimeout","element","nextElementSibling","parentElement","insertBefore","cloneNode","lastElementChild","appendChild","dragEnterHandler","stopPropagation","matches","dragOverHandler","dragLeaveHandler","dragDropHandler","nextSibling","dragEndHandler","zone","dispatchEvent","XHRPromise","method","url","data","xhr","XMLHttpRequest","Promise","resolve","reject","onreadystatechange","readyState","DONE","status","response","JSON","parse","responseText","text","error","open","setRequestHeader","send","getXHRPromise","queryString","Object","keys","map","k","encodeURIComponent","postXHRPromise","formData","FormData","entries","key","value","append","csrfTokenName","csrfTokenValue","navItems","navPages","navCollections","navPlaceholder","navElement","navContainer","elementKey","appendNavElements","nav","newNav","arrayKey","input","name","replace","navId","pageId","pageTitle","navTitle","collectionId","collectionTitle","length","addPageNav","checked","navItem","push","addCollectionNav","addPlaceholderNav","movedElementParentId","newParent","deleteNavItem","deleteNavigationPrompt","navIds","i","id","parseInt","isNaN","stringify","routes","adminNavigationDelete","then","catch","console","log"],"mappings":"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","file":"navigation.js","sourceRoot":"..","sourcesContent":["/**\n * Enable Form Control\n *\n * @param {object} control Control button element\n */\nconst enableFormControl = function(control) {\n    if (control && control.disabled) {\n        control.disabled = false;\n    }\n}\n\n/**\n * Disable Form Control\n *\n * @param {object} control Control button element\n */\nconst disableFormControl =  function(control) {\n    if (control && !control.disabled) {\n        control.disabled = true;\n    }\n}\n\nexport { enableFormControl, disableFormControl };","/**\n * Dismiss Inline Alert\n * @param {Event} event\n */\nconst dismissAlertInlineMessage = function(event) {\n    if (event.target.dataset.dismiss === \"alert\") {\n        event.target.closest(`[data-alert=\"container\"]`).remove();\n    }\n}\n\n/**\n * Display Inline HTML Message Alert\n * @param {string} severity Severity color code\n * @param {string} heading  Message heading\n * @param {mixed} message   Message list\n */\nconst alertInlineMessage = function(severity, heading, message) {\n    // Create element and insert alert HTML and update with alert data\n    let container = document.createElement(\"div\");\n    container.innerHTML = pitonConfig.alertInlineHTML;\n    container.querySelector(`[data-alert=\"container\"]`).classList.add(\"alert-\" + severity);\n    container.querySelector(`[data-alert=\"heading\"]`).innerHTML = heading;\n\n    // Stringify message\n    if (typeof message === 'object') {\n        message = message.join(\"<br>\");\n    } else if (typeof message === 'undefined') {\n        message = \"\";\n    }\n\n    container.querySelector(`[data-alert=\"content\"]`).innerHTML = message;\n\n    // Insert into main or body\n    let mainContainer = document.querySelector(\"main.main-content\");\n    mainContainer.insertAdjacentHTML('afterbegin', container.innerHTML);\n    window.scrollTo(0,0);\n}\n\nexport { alertInlineMessage, dismissAlertInlineMessage };","/**\n * Collapse Toggle\n * @param {Event} event\n */\nconst collapseToggle = function(event) {\n    if (event.target.dataset.collapse === 'toggle') {\n        let collapseTarget = event.target.closest(`[data-collapse=\"parent\"]`).querySelector(`[data-collapse=\"target\"]`);\n\n        if (collapseTarget) {\n            collapseTarget.classList.toggle(\"collapsed\");\n        }\n    }\n}\n\nexport { collapseToggle };","// --------------------------------------------------------\n// Main JS\n// --------------------------------------------------------\n\nimport { enableFormControl, disableFormControl } from './formControl.js';\nimport { dismissAlertInlineMessage } from './alert.js';\nimport { collapseToggle } from './collapse.js';\n\n// Form Control Events\ndocument.querySelectorAll(\"form\").forEach(form => {\n    // Disable form controls and listen for form input changes to re-enable save controls\n    let saveButtons = form.querySelectorAll(`[data-form-button=\"save\"]`);\n    if (saveButtons) {\n        saveButtons.forEach(control => {\n            disableFormControl(control);\n        });\n\n        // Listen for form changes to reenable controls\n        form.addEventListener(\"input\", (e) => {\n            saveButtons.forEach(control => {\n                enableFormControl(control);\n            });\n        }, false);\n    }\n\n    // Confirm discard of changes\n    form.querySelectorAll(`[data-form-button=\"cancel\"]`).forEach(control => {\n        control.addEventListener(\"click\", (e) => {\n            let userResponse = confirm(\"Click Ok to discard your changes, or cancel continue editing?\");\n            if (!userResponse) e.preventDefault();\n        }, false);\n    });\n\n    // Confirm delete\n    form.querySelectorAll(`[data-delete-prompt]`).forEach(control => {\n        control.addEventListener(\"click\", (e) => {\n            if (!confirm(e.target.dataset.deletePrompt)) e.preventDefault();\n        }, false);\n    });\n});\n\n// Binding click events to document\ndocument.addEventListener(\"click\", dismissAlertInlineMessage, false);\ndocument.addEventListener(\"click\", collapseToggle, false);","/**\n * Enable Spinner Overlay\n * @param {void}\n */\nconst enableSpinner = function() {\n    if (document.querySelector(\"body > .spinner\").classList.contains(\"d-none\")) {\n        document.querySelector(\"body > .spinner\").classList.remove(\"d-none\")\n    }\n}\n\n/**\n * Disable Spinner Overlay\n * @param {void}\n */\nconst disableSpinner = function() {\n    if (!document.querySelector(\"body > .spinner\").classList.contains(\"d-none\")) {\n        document.querySelector(\"body > .spinner\").classList.add(\"d-none\")\n    }\n}\n\nexport { enableSpinner, disableSpinner };","// Reference to element to be moved\nlet movedElement;\n\n// Event to dispatch pseudo \"input\" event\nconst inputEvent = new Event(\"input\", {\"bubbles\": true});\n\n// Empty drop zone divs to inject in DOM around draggable elements\nconst dropZone = document.createElement(\"div\");\ndropZone.classList.add(\"drag-drop\");\n\n/**\n * Return Moved Element\n */\nconst getMovedElement = function() {\n    return movedElement;\n}\n\n/**\n * Drag Start Handler\n * @param {Event} event\n */\nconst dragStartHandler = function(event) {\n    // Save reference to the element being moved\n    movedElement = event.target;\n\n    event.dataTransfer.setData(\"text/plain\", null);\n    event.dataTransfer.dropEffect = \"move\";\n\n    // Insert drop zone divs around each draggable element\n    // setTimeout() hack: https://stackoverflow.com/a/34698388/452133\n    // To allow DOM manipulation in dragstart\n    setTimeout(() => {\n        document.querySelectorAll(`[draggable=\"true\"]`).forEach(element => {\n            // Insert drop zone before all draggable elements\n            // Except around and inside the movedElement\n            if (element !== movedElement && element !== movedElement.nextElementSibling && !movedElement.contains(element)) {\n                element.parentElement.insertBefore(dropZone.cloneNode(), element);\n            }\n\n            // Insert drop zone after last child\n            if (element === element.parentElement.lastElementChild && element !== movedElement) {\n                element.parentElement.appendChild(dropZone.cloneNode());\n            }\n        });\n\n        // Optional \"other\" drop targets\n        document.querySelectorAll(`[data-drop-zone=\"1\"]`).forEach(element => {\n            // Do not allow movedElement to become child of itself\n            if (!movedElement.contains(element)) {\n                element.parentElement.insertBefore(dropZone.cloneNode(), element);\n            }\n        });\n    }, 0);\n}\n\n/**\n * Drag Enter Handler\n * @param {Event} event\n */\nconst dragEnterHandler = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.dataTransfer.dropEffect = \"move\";\n\n    if (event.target.matches(\".drag-drop\")) {\n        event.target.classList.add(\"drag-hover\");\n    }\n}\n\n/**\n * Drag Over Handler\n * @param {Event} event\n */\nconst dragOverHandler = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.dataTransfer.dropEffect = \"move\";\n}\n\n/**\n * Drag Leave Handler\n * @param {Event} event\n */\nconst dragLeaveHandler = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.dataTransfer.dropEffect = \"move\";\n\n    if (event.target.matches(\".drag-drop\")) {\n        event.target.classList.remove(\"drag-hover\");\n    }\n}\n\n/**\n * Drag Drop Handler\n * @param {Event} event\n */\nconst dragDropHandler = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (movedElement !== event.target && event.target.matches(\".drag-drop\")) {\n        event.target.parentElement.insertBefore(movedElement, event.target.nextSibling)\n    }\n}\n\n/**\n * Drag End Handler\n * @param {Event} event\n */\nconst dragEndHandler = function(event) {\n    // Cleanup drop zones\n    document.querySelectorAll(\".drag-drop\").forEach(zone => {\n        zone.remove();\n    });\n\n    // Initiatve input event\n    movedElement.dispatchEvent(inputEvent);\n}\n\nexport { dragStartHandler, dragEnterHandler, dragOverHandler, dragLeaveHandler, dragDropHandler, dragEndHandler, getMovedElement };","import { alertInlineMessage } from './alert.js';\nimport { disableSpinner } from './spinner.js';\n\n/**\n * XHR Request Promise\n * @param {string} method \"GET\"|\"POST\"\n * @param {string} url    Resource request URL\n * @param {FormData} data   FormData payload to send\n */\nconst XHRPromise = function(method, url, data) {\n    let xhr = new XMLHttpRequest();\n\n    return new Promise((resolve, reject) => {\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState !== XMLHttpRequest.DONE) return;\n\n            try {\n                if (xhr.status === 200) {\n                    // Successful server response\n                    let response = JSON.parse(xhr.responseText);\n                    if (response.status === \"success\") {\n                        // Response content successful\n                        resolve(response.text);\n                        disableSpinner();\n                    } else {\n                        // Response successful but application failed\n                        reject(alertInlineMessage('danger', 'Failed', [response.text]));\n                        disableSpinner();\n                    }\n                } else {\n                    // Failed server runtime response\n                    reject(alertInlineMessage('danger', 'Failed', [response.text]));\n                    disableSpinner();\n                }\n            } catch (error) {\n                reject(alertInlineMessage('danger', 'Error', [error]));\n                disableSpinner();\n            }\n        }\n\n        // Setup and send\n        xhr.open(method, url, true);\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        xhr.send(data);\n    });\n}\n\n/**\n * GET XHR Promise Request\n * @param {string} url  Resource URL\n * @param {object} data Object with query string parameters as key: values\n */\nconst getXHRPromise = function(url, data) {\n    let queryString;\n\n    if (data) {\n        queryString = Object.keys(data).map((k) => {\n            return encodeURIComponent(k) + '=' + encodeURIComponent(data[k])\n        }).join('&');\n    }\n\n    // Attach query string to URL\n    if (queryString) {\n        url += '?' + queryString;\n    }\n\n    return XHRPromise(\"GET\", url);\n}\n\n/**\n * POST XHR Promise Request\n * @param {string} url  Resource URL\n * @param {object} data Object with key: values, or FormData instance\n */\nconst postXHRPromise = function(url, data) {\n    let formData;\n    if (data instanceof FormData) {\n        formData = data;\n    } else {\n        formData = new FormData();\n        for (let [key, value] of Object.entries(data)) {\n            formData.append(key, value);\n        }\n    }\n\n    data.append(pitonConfig.csrfTokenName, pitonConfig.csrfTokenValue);\n\n    return XHRPromise(\"POST\", url,  formData);\n}\n\nexport { getXHRPromise, postXHRPromise };\n","// --------------------------------------------------------\n// Navigation\n// --------------------------------------------------------\nimport './modules/main.js';\nimport { enableSpinner, disableSpinner } from './modules/spinner.js';\nimport { dragStartHandler, dragEnterHandler, dragOverHandler, dragLeaveHandler, dragEndHandler, getMovedElement } from './modules/drag.js';\nimport { postXHRPromise } from './modules/xhrPromise.js';\nimport { alertInlineMessage } from './modules/alert.js';\n\nconst navItems = [];\nconst navPages = document.querySelectorAll(`[data-add-nav=\"page\"] input`);\nconst navCollections = document.querySelectorAll(`[data-add-nav=\"collection\"] input`);\nconst navPlaceholder = document.querySelectorAll(`[data-add-nav=\"placeholder\"] input`);\nconst navElement = document.querySelector(`[data-navigation=\"spare\"] > div`);\nconst navContainer = document.querySelector(`[data-navigation-container=\"1\"]`);\nlet elementKey = 0;\n\n/**\n * Append Navigation Elements\n */\nconst appendNavElements = function() {\n    navItems.forEach(nav => {\n        // Clone spare navigation element, and set unique name array key so POST array keeps inputs together\n        let newNav = navElement.cloneNode(true);\n        let arrayKey = (elementKey++) + \"n\";\n        newNav.querySelectorAll(`input[name^=nav]`).forEach(input => {\n            input.name = input.name.replace(/(.+?\\[)(\\].+)/, \"$1\" + arrayKey + \"$2\");\n        });\n        newNav.dataset.navId = arrayKey;\n\n        // Set data\n        if (nav.pageId) {\n            newNav.querySelector(`input[name$=\"\\[pageId\\]\"]`).value = nav.pageId;\n            newNav.querySelector(`[data-nav=\"title\"]`).innerHTML = nav.pageTitle;\n            newNav.querySelector(`[data-nav=\"type\"]`).innerHTML = \"page\";\n            newNav.querySelector(`[data-nav=\"pageTitle\"]`).innerHTML = nav.pageTitle;\n            newNav.querySelector(`[data-nav=\"pageTitle\"]`).parentElement.classList.remove(\"d-none\");\n\n        } else if (nav.navTitle) {\n            newNav.querySelector(`[data-nav=\"title\"]`).innerHTML = nav.navTitle;\n            newNav.querySelector(`[data-nav=\"type\"]`).innerHTML = \"placeholder\";\n            newNav.querySelector(`input[name$=\"\\[navTitle\\]\"]`).value = nav.navTitle;\n            newNav.querySelector(`input[name$=\"\\[url\\]\"]`).value = nav.url;\n            newNav.querySelector(`input[name$=\"\\[url\\]\"]`).parentElement.classList.remove(\"d-none\");\n\n        } else if (nav.collectionId) {\n            newNav.querySelector(`input[name$=\"\\[collectionId\\]\"]`).value = nav.collectionId;\n            newNav.querySelector(`[data-nav=\"title\"]`).innerHTML = nav.collectionTitle;\n            newNav.querySelector(`[data-nav=\"type\"]`).innerHTML = \"collection\";\n            newNav.querySelector(`[data-nav=\"collectionTitle\"]`).innerHTML = nav.collectionTitle;\n            newNav.querySelector(`[data-nav=\"collectionTitle\"]`).parentElement.classList.remove(\"d-none\");\n\n        }\n\n        navContainer.appendChild(newNav);\n        newNav.dispatchEvent(new Event(\"input\", {\"bubbles\": true}));\n    });\n\n    // Reset\n    navItems.length = 0;\n}\n\n/**\n * Add Page Navigation\n */\nconst addPageNav = function() {\n    navPages.forEach(element => {\n        if (element.checked) {\n            let navItem = {\n                \"pageId\": element.dataset.pageId,\n                \"pageTitle\": element.dataset.pageTitle\n            }\n\n            element.checked = false;\n            navItems.push(navItem);\n        }\n\n    });\n\n    appendNavElements();\n}\n\n/**\n * Add Collection Navigation\n */\nconst addCollectionNav = function() {\n    navCollections.forEach(element => {\n        if (element.checked) {\n            let navItem = {\n                \"collectionId\": element.dataset.collectionId,\n                \"collectionTitle\": element.dataset.collectionTitle\n            }\n\n            element.checked = false;\n            navItems.push(navItem);\n        }\n\n    });\n\n    appendNavElements();\n}\n\n/**\n * Add Placeholder Navigation\n */\nconst addPlaceholderNav = function() {\n    if (navPlaceholder[0].value) {\n        let navItem = {\n            \"navTitle\": navPlaceholder[0].value,\n            \"url\": navPlaceholder[1].value\n        }\n\n        navPlaceholder[0].value = \"\";\n        navPlaceholder[1].value = \"\";\n        navItems.push(navItem);\n    }\n\n    appendNavElements();\n}\n\n/**\n * Insert Child Drop Zone\n */\n\n/**\n * OVERRIDE Drag Drop Handler\n * Overrides drag.js to support child navigation drops\n * @param {Event} event\n */\nconst dragDropHandler = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    let movedElement = getMovedElement();\n\n    // Nothing to do if dropping on self\n    if (movedElement !== event.target && event.target.matches(\".drag-drop\")) {\n        let movedElementParentId = movedElement.querySelector(`input[name$=\"\\[parentId\\]\"]`).value;\n        let newParent = event.target.parentElement.closest(`[data-navigation=\"parent\"]`);\n\n        // If the element parentId matches the current parent ID (element sorted within current level), just drop in new order\n        if (movedElementParentId === newParent.dataset.navId) {\n            event.target.parentElement.insertBefore(movedElement, event.target.nextSibling);\n        }\n\n        // If the element parentId and does not match the new  parent ID, move to last child of new parent\n        if (movedElementParentId !== newParent.dataset.navId) {\n            movedElement.querySelector(`input[name$=\"\\[parentId\\]\"]`).value = newParent.dataset.navId;\n\n            // Add / remove class\n            if (newParent.dataset.navId === \"\") {\n                movedElement.classList.remove(\"sub-toggle-block\");\n            } else {\n                movedElement.classList.add(\"sub-toggle-block\");\n            }\n\n            event.target.parentElement.insertBefore(movedElement, event.target.nextSibling);\n        }\n    }\n}\n\nconst deleteNavItem = function(event) {\n    if (!event.target.dataset.deleteNavigationPrompt) return;\n    if (!confirm(event.target.dataset.deleteNavigationPrompt)) return;\n\n     // Get nav element and create array of IDs to delete\n     let navIds = [];\n     let navElement = event.target.closest(`[data-navigation=\"parent\"]`);\n\n     // Get this ID and all currently assigned child navigation ID's. Some may have been previously saved before being added to this nav parent\n     navElement.querySelectorAll(`input[name$=\"\\[navId\\]\"]`).forEach((i) => {\n        let id = parseInt(i.value);\n        if (!isNaN(id)) {\n            navIds.push(id);\n        }\n     });\n\n     if (navIds.length > 0) {\n        // Delete any navs that had been saved\n        enableSpinner();\n        let data = JSON.stringify(navIds);\n\n        postXHRPromise(pitonConfig.routes.adminNavigationDelete, {\"navIds\": data})\n            .then(() => {\n                // This removes the current nav item along with any children\n                navElement.remove();\n            })\n            .catch((text) => {\n                console.log(\"Failed to delete navigation: \", text);\n                alertInlineMessage('danger', 'Failed to Delete Navigation', text);\n                disableSpinner();\n        });\n\n        // Reset\n        navIds.length = 0;\n     } else {\n        // This removes the current nav item along with any children\n        navElement.remove();\n     }\n\n}\n\n// Bind events\ndocument.querySelector(`[data-add-nav=\"pageButton\"]`).addEventListener(\"click\", addPageNav, false);\ndocument.querySelector(`[data-add-nav=\"collectionButton\"]`).addEventListener(\"click\", addCollectionNav, false);\ndocument.querySelector(`[data-add-nav=\"placeholderButton\"]`).addEventListener(\"click\", addPlaceholderNav, false);\ndocument.addEventListener(\"click\", deleteNavItem, false);\n\n// Draggable navigation elements\ndocument.querySelectorAll(`[data-draggable=\"children\"]`).forEach(zone => {\n    zone.addEventListener(\"dragstart\", dragStartHandler, false);\n    zone.addEventListener(\"dragenter\", dragEnterHandler, false);\n    zone.addEventListener(\"dragover\", dragOverHandler, false);\n    zone.addEventListener(\"dragleave\", dragLeaveHandler, false);\n    zone.addEventListener(\"drop\", dragDropHandler, false);\n    zone.addEventListener(\"dragend\", dragEndHandler, false);\n});\n\n// Prevent nav source from triggering form control enable\ndocument.querySelectorAll(`[data-add-nav=\"page\"], [data-add-nav=\"collection\"], [data-add-nav=\"placeholder\"]`).forEach(element => {\n    element.addEventListener(\"input\", (event) => {\n        event.stopPropagation();\n    });\n});"]}