{"version":3,"sources":["modules/formControl.js","modules/alert.js","modules/collapse.js","modules/main.js","navigation.js"],"names":["enableFormControl","control","disabled","disableFormControl","dismissAlertInlineMessage","event","target","dataset","dismiss","closest","remove","alertInlineMessage","severity","heading","message","container","document","createElement","innerHTML","pitonConfig","alertInlineHTML","querySelector","classList","add","join","insertAdjacentHTML","window","scrollTo","collapseToggle","collapse","collapseTarget","toggle","querySelectorAll","forEach","form","saveButtons","addEventListener","e","confirm","preventDefault","deletePrompt","navItems","navPages","navPlaceholder","navElement","navContainer","navItemKey","appendNavElements","nav","newNav","cloneNode","arrayKey","input","name","replace","pageId","value","pageTitle","parentElement","navTitle","url","appendChild","length","addPageNav","element","checked","navItem","push","addPlaceholderNav"],"mappings":"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","file":"navigation.js","sourceRoot":"..","sourcesContent":["/**\n * Enable Form Control\n *\n * @param {object} control Control button element\n */\nconst enableFormControl = function(control) {\n    if (control && control.disabled) {\n        control.disabled = false;\n    }\n}\n\n/**\n * Disable Form Control\n *\n * @param {object} control Control button element\n */\nconst disableFormControl =  function(control) {\n    if (control && !control.disabled) {\n        control.disabled = true;\n    }\n}\n\nexport { enableFormControl, disableFormControl };","/**\n * Dismiss Inline Alert\n * @param {Event} event\n */\nconst dismissAlertInlineMessage = function(event) {\n    if (event.target.dataset.dismiss === \"alert\") {\n        event.target.closest(`[data-alert=\"container\"]`).remove();\n    }\n}\n\n/**\n * Display Inline HTML Message Alert\n * @param {string} severity Severity color code\n * @param {string} heading  Message heading\n * @param {mixed} message   Message list\n */\nconst alertInlineMessage = function(severity, heading, message) {\n    // Create element and insert alert HTML and update with alert data\n    let container = document.createElement(\"div\");\n    container.innerHTML = pitonConfig.alertInlineHTML;\n    container.querySelector(`[data-alert=\"container\"]`).classList.add(\"alert-\" + severity);\n    container.querySelector(`[data-alert=\"heading\"]`).innerHTML = heading;\n\n    // Stringify message\n    if (typeof message === 'object') {\n        message = message.join(\"<br>\");\n    }\n    container.querySelector(`[data-alert=\"content\"]`).innerHTML = message;\n\n    // Insert into main or body\n    let mainContainer = document.querySelector(\"main.main-content\");\n    mainContainer.insertAdjacentHTML('afterbegin', container.innerHTML);\n    window.scrollTo(0,0);\n}\n\nexport { alertInlineMessage, dismissAlertInlineMessage };","/**\n * Collapse Toggle\n * @param {Event} event\n */\nconst collapseToggle = function(event) {\n    if (event.target.dataset.collapse === 'toggle') {\n        let collapseTarget = event.target.closest(`[data-collapse=\"parent\"]`).querySelector(`[data-collapse=\"target\"]`);\n\n        if (collapseTarget) {\n            collapseTarget.classList.toggle(\"collapsed\");\n        }\n    }\n}\n\nexport { collapseToggle };","// --------------------------------------------------------\n// Main JS\n// --------------------------------------------------------\n\nimport { enableFormControl, disableFormControl } from './formControl.js';\nimport { dismissAlertInlineMessage } from './alert.js';\nimport { collapseToggle } from './collapse.js';\n\n// Form Control Events\ndocument.querySelectorAll(\"form\").forEach(form => {\n    // Disable form controls and listen for form input changes to re-enable save controls\n    let saveButtons = form.querySelectorAll(`[data-form-button=\"save\"]`);\n    if (saveButtons) {\n        saveButtons.forEach(control => {\n            disableFormControl(control);\n        });\n\n        // Listen for form changes to reenable controls\n        form.addEventListener(\"input\", (e) => {\n            saveButtons.forEach(control => {\n                enableFormControl(control);\n            });\n        }, false);\n    }\n\n    // Confirm discard of changes\n    form.querySelectorAll(`[data-form-button=\"cancel\"]`).forEach(control => {\n        control.addEventListener(\"click\", (e) => {\n            let userResponse = confirm(\"Click Ok to discard your changes, or cancel continue editing?\");\n            if (!userResponse) e.preventDefault();\n        }, false);\n    });\n\n    // Confirm delete\n    form.querySelectorAll(`[data-delete-prompt]`).forEach(control => {\n        control.addEventListener(\"click\", (e) => {\n            if (!confirm(e.target.dataset.deletePrompt)) e.preventDefault();\n        }, false);\n    });\n});\n\n// Binding click events to document\ndocument.addEventListener(\"click\", dismissAlertInlineMessage, false);\ndocument.addEventListener(\"click\", collapseToggle, false);","// --------------------------------------------------------\n// Navigation\n// --------------------------------------------------------\nimport './modules/main.js';\n\nconst navItems = [];\nconst navPages = document.querySelectorAll(`[data-add-nav=\"page\"] input`);\nconst navPlaceholder = document.querySelectorAll(`[data-add-nav=\"placeholder\"] input`);\nconst navElement = document.querySelector(`[data-navigation-element=\"1\"] > div`);\nconst navContainer = document.querySelector(`[data-navigation=\"container\"]`);\nlet navItemKey = 0;\n\n/**\n * Append Navigation Elements\n */\nconst appendNavElements = function() {\n  navItems.forEach(nav => {\n    // Clone spare navigation element, and set unique name array key so POST array keeps inputs together\n    let newNav = navElement.cloneNode(true);\n    let arrayKey = (navItemKey++) + \"n\";\n    newNav.querySelectorAll(`input[name^=nav]`).forEach(input => {\n      input.name = input.name.replace(/(.+?\\[)(\\].+)/, \"$1\" + arrayKey + \"$2\");\n    });\n\n    // Set data\n    if (nav.pageId) {\n      newNav.querySelector(`input[name$=\"\\[pageId\\]\"]`).value = nav.pageId;\n      newNav.querySelector(`[data-nav=\"title\"]`).innerHTML = nav.pageTitle;\n      newNav.querySelector(`[data-nav=\"type\"]`).innerHTML = \"page\";\n      newNav.querySelector(`[data-nav=\"pageTitle\"]`).innerHTML = nav.pageTitle;\n      newNav.querySelector(`[data-nav=\"pageTitle\"]`).parentElement.classList.remove(\"d-none\");\n\n    } else if (nav.navTitle) {\n      newNav.querySelector(`[data-nav=\"title\"]`).innerHTML = nav.navTitle;\n      newNav.querySelector(`[data-nav=\"type\"]`).innerHTML = \"placeholder\";\n      newNav.querySelector(`input[name$=\"\\[navTitle\\]\"]`).value = nav.navTitle;\n      newNav.querySelector(`input[name$=\"\\[url\\]\"]`).value = nav.url;\n      newNav.querySelector(`input[name$=\"\\[url\\]\"]`).parentElement.classList.remove(\"d-none\");\n\n    }\n\n    navContainer.appendChild(newNav);\n  });\n\n  // Reset\n  navItems.length = 0;\n}\n\n/**\n * Add Page Navigation\n */\nconst addPageNav = function() {\n  navPages.forEach(element => {\n    if (element.checked) {\n      let navItem = {\n        \"pageId\": element.dataset.pageId,\n        \"pageTitle\": element.dataset.pageTitle\n      }\n\n      element.checked = false;\n      navItems.push(navItem);\n    }\n\n  });\n\n  appendNavElements();\n}\n\n/**\n * Add Placeholder Navigation\n */\nconst addPlaceholderNav = function() {\n  if (navPlaceholder[0].value) {\n    let navItem = {\n      \"navTitle\": navPlaceholder[0].value,\n      \"url\": navPlaceholder[1].value\n    }\n\n    navPlaceholder[0].value = \"\";\n    navPlaceholder[1].value = \"\";\n    navItems.push(navItem);\n  }\n\n  appendNavElements();\n}\n\n// Bind events\ndocument.querySelector(`[data-add-nav=\"pageButton\"]`).addEventListener(\"click\", addPageNav, false);\ndocument.querySelector(`[data-add-nav=\"placeholderButton\"]`).addEventListener(\"click\", addPlaceholderNav, false);\n"]}