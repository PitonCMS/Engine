{"version":3,"sources":["modules/formControl.js","modules/alert.js","modules/collapse.js","modules/main.js","modules/spinner.js","modules/drag.js","modules/xhrPromise.js","navigation.js"],"names":["enableFormControl","control","disabled","disableFormControl","alertContainer","document","querySelector","dismissAlertInlineMessage","event","target","dataset","dismiss","closest","remove","alertInlineMessage","severity","heading","message","container","createElement","innerHTML","pitonConfig","alertInlineHTML","classList","add","join","insertAdjacentHTML","window","scrollTo","collapseToggle","collapse","collapseTarget","toggle","querySelectorAll","forEach","form","saveButtons","addEventListener","e","confirm","preventDefault","deletePrompt","enableSpinner","contains","disableSpinner","movedElement","inputEvent","Event","dropZone","getMovedElement","dragStartHandler","dataTransfer","setData","dropEffect","setTimeout","element","nextElementSibling","parentElement","insertBefore","cloneNode","lastElementChild","appendChild","dragEnterHandler","stopPropagation","matches","dragOverHandler","dragLeaveHandler","dragDropHandler","nextSibling","dragEndHandler","zone","dispatchEvent","XHRPromise","method","url","data","xhr","XMLHttpRequest","Promise","resolve","reject","response","onreadystatechange","readyState","DONE","status","JSON","parse","responseText","text","error","open","setRequestHeader","send","getXHRPromise","Object","queryString","URLSearchParams","entries","key","value","append","toString","postXHRPromise","formData","FormData","csrfTokenName","csrfTokenValue","navItems","navPages","navCollections","navPlaceholder","navElement","navContainer","elementKey","appendNavElements","nav","newNav","arrayKey","input","name","replace","navId","pageId","pageTitle","navTitle","collectionId","collectionTitle","length","addPageNav","checked","navItem","push","addCollectionNav","addPlaceholderNav","movedElementParentId","newParent","deleteNavItem","deleteNavigationPrompt","navIds","i","id","parseInt","isNaN","stringify","routes","adminNavigationDelete","then","catch","console","log"],"mappings":"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","file":"navigation.js","sourceRoot":"..","sourcesContent":["/**\n * Enable Form Control\n *\n * @param {object} control Control button element\n */\nconst enableFormControl = function(control) {\n    if (control && control.disabled) {\n        control.disabled = false;\n    }\n}\n\n/**\n * Disable Form Control\n *\n * @param {object} control Control button element\n */\nconst disableFormControl =  function(control) {\n    if (control && !control.disabled) {\n        control.disabled = true;\n    }\n}\n\nexport { enableFormControl, disableFormControl };","\nconst alertContainer = document.querySelector(`[data-alert-modal=\"1\"]`);\n\n/**\n * Dismiss Inline Alert\n * @param {Event} event\n */\nconst dismissAlertInlineMessage = function(event) {\n    if (event.target.dataset.dismiss === \"alert\") {\n        event.target.closest(`[data-alert=\"container\"]`).remove();\n    }\n}\n\n/**\n * Display Inline HTML Message Alert\n * @param {string} severity Severity color code\n * @param {string} heading  Message heading\n * @param {mixed} message   Message list\n */\nconst alertInlineMessage = function(severity, heading, message) {\n    // Create element and insert alert HTML and update with alert data\n    let container = document.createElement(\"div\");\n    container.innerHTML = pitonConfig.alertInlineHTML;\n    container.querySelector(`[data-alert=\"container\"]`).classList.add(\"alert-\" + severity);\n    container.querySelector(`[data-alert=\"heading\"]`).innerHTML = heading;\n\n    // Stringify message\n    if (typeof message === 'object') {\n        message = message.join(\"<br>\");\n    } else if (typeof message === 'undefined') {\n        message = \"\";\n    }\n\n    container.querySelector(`[data-alert=\"content\"]`).innerHTML = message;\n\n    // Insert into modal-alert container\n    alertContainer.insertAdjacentHTML('afterbegin', container.innerHTML);\n    window.scrollTo(0,0);\n}\n\nexport { alertInlineMessage, dismissAlertInlineMessage };","/**\n * Collapse Toggle\n * @param {Event} event\n */\nconst collapseToggle = function(event) {\n    if (event.target.dataset.collapse === 'toggle') {\n        let collapseTarget = event.target.closest(`[data-collapse=\"parent\"]`).querySelector(`[data-collapse=\"target\"]`);\n\n        if (collapseTarget) {\n            collapseTarget.classList.toggle(\"collapsed\");\n        }\n    }\n}\n\nexport { collapseToggle };","// --------------------------------------------------------\n// Main JS\n// --------------------------------------------------------\n\nimport { enableFormControl, disableFormControl } from './formControl.js';\nimport { dismissAlertInlineMessage } from './alert.js';\nimport { collapseToggle } from './collapse.js';\n\n// Form Control Events\ndocument.querySelectorAll(\"form\").forEach(form => {\n    // Disable form controls and listen for form input changes to re-enable save controls\n    let saveButtons = form.querySelectorAll(`[data-form-button=\"save\"]`);\n    if (saveButtons) {\n        saveButtons.forEach(control => {\n            disableFormControl(control);\n        });\n\n        // Listen for form changes to reenable controls\n        form.addEventListener(\"input\", (e) => {\n            saveButtons.forEach(control => {\n                enableFormControl(control);\n            });\n        }, false);\n    }\n\n    // Confirm discard of changes\n    form.querySelectorAll(`[data-form-button=\"cancel\"]`).forEach(control => {\n        control.addEventListener(\"click\", (e) => {\n            let userResponse = confirm(\"Click Ok to discard your changes, or cancel continue editing?\");\n            if (!userResponse) e.preventDefault();\n        }, false);\n    });\n\n    // Confirm delete\n    form.querySelectorAll(`[data-delete-prompt]`).forEach(control => {\n        control.addEventListener(\"click\", (e) => {\n            if (!confirm(e.target.dataset.deletePrompt)) e.preventDefault();\n        }, false);\n    });\n});\n\n// Binding click events to document\ndocument.addEventListener(\"click\", dismissAlertInlineMessage, false);\ndocument.addEventListener(\"click\", collapseToggle, false);","/**\n * Enable Spinner Overlay\n * @param {void}\n */\nconst enableSpinner = function() {\n    if (document.querySelector(\"body > .spinner\").classList.contains(\"d-none\")) {\n        document.querySelector(\"body > .spinner\").classList.remove(\"d-none\")\n    }\n}\n\n/**\n * Disable Spinner Overlay\n * @param {void}\n */\nconst disableSpinner = function() {\n    if (!document.querySelector(\"body > .spinner\").classList.contains(\"d-none\")) {\n        document.querySelector(\"body > .spinner\").classList.add(\"d-none\")\n    }\n}\n\nexport { enableSpinner, disableSpinner };","// Reference to element to be moved\nlet movedElement;\n\n// Event to dispatch pseudo \"input\" event\nconst inputEvent = new Event(\"input\", {\"bubbles\": true});\n\n// Empty drop zone divs to inject in DOM around draggable elements\nconst dropZone = document.createElement(\"div\");\ndropZone.classList.add(\"drag-drop\");\n\n/**\n * Return Moved Element\n */\nconst getMovedElement = function() {\n    return movedElement;\n}\n\n/**\n * Drag Start Handler\n * @param {Event} event\n */\nconst dragStartHandler = function(event) {\n    // Save reference to the element being moved\n    movedElement = event.target;\n\n    event.dataTransfer.setData(\"text/plain\", null);\n    event.dataTransfer.dropEffect = \"move\";\n\n    // Insert drop zone divs around each draggable element\n    // setTimeout() hack: https://stackoverflow.com/a/34698388/452133\n    // To allow DOM manipulation in dragstart\n    setTimeout(() => {\n        document.querySelectorAll(`[draggable=\"true\"]`).forEach(element => {\n            // Insert drop zone before all draggable elements\n            // Except around and inside the movedElement\n            if (element !== movedElement && element !== movedElement.nextElementSibling && !movedElement.contains(element)) {\n                element.parentElement.insertBefore(dropZone.cloneNode(), element);\n            }\n\n            // Insert drop zone after last child\n            if (element === element.parentElement.lastElementChild && element !== movedElement) {\n                element.parentElement.appendChild(dropZone.cloneNode());\n            }\n        });\n\n        // Optional \"other\" drop targets\n        document.querySelectorAll(`[data-drop-zone=\"1\"]`).forEach(element => {\n            // Do not allow movedElement to become child of itself\n            if (!movedElement.contains(element)) {\n                element.parentElement.insertBefore(dropZone.cloneNode(), element);\n            }\n        });\n    }, 0);\n}\n\n/**\n * Drag Enter Handler\n * @param {Event} event\n */\nconst dragEnterHandler = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.dataTransfer.dropEffect = \"move\";\n\n    if (event.target.matches(\".drag-drop\")) {\n        event.target.classList.add(\"drag-hover\");\n    }\n}\n\n/**\n * Drag Over Handler\n * @param {Event} event\n */\nconst dragOverHandler = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.dataTransfer.dropEffect = \"move\";\n}\n\n/**\n * Drag Leave Handler\n * @param {Event} event\n */\nconst dragLeaveHandler = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.dataTransfer.dropEffect = \"move\";\n\n    if (event.target.matches(\".drag-drop\")) {\n        event.target.classList.remove(\"drag-hover\");\n    }\n}\n\n/**\n * Drag Drop Handler\n * @param {Event} event\n */\nconst dragDropHandler = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (movedElement !== event.target && event.target.matches(\".drag-drop\")) {\n        event.target.parentElement.insertBefore(movedElement, event.target.nextSibling)\n    }\n}\n\n/**\n * Drag End Handler\n * @param {Event} event\n */\nconst dragEndHandler = function(event) {\n    // Cleanup drop zones\n    document.querySelectorAll(\".drag-drop\").forEach(zone => {\n        zone.remove();\n    });\n\n    // Initiatve input event\n    movedElement.dispatchEvent(inputEvent);\n}\n\nexport { dragStartHandler, dragEnterHandler, dragOverHandler, dragLeaveHandler, dragDropHandler, dragEndHandler, getMovedElement };","import { alertInlineMessage } from './alert.js';\nimport { disableSpinner } from './spinner.js';\n\n/**\n * XHR Request Promise\n * @param {string} method \"GET\"|\"POST\"\n * @param {string} url    Resource request URL\n * @param {FormData} data   FormData payload to send\n */\nconst XHRPromise = function(method, url, data) {\n    let xhr = new XMLHttpRequest();\n\n    return new Promise((resolve, reject) => {\n\n        let response;\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState !== XMLHttpRequest.DONE) return;\n\n            try {\n                if (xhr.status === 200) {\n                    // Successful server response\n                    response = JSON.parse(xhr.responseText);\n\n                    if (response.status === \"success\") {\n                        // Response successful, resolve\n                        resolve(response.text);\n                        disableSpinner();\n                    } else {\n                        // Response successful but application failed, reject and alert\n                        reject();\n                        alertInlineMessage('danger', 'Piton Error', [response.text]);\n                        disableSpinner();\n                    }\n                } else {\n                    // Failed server runtime response\n                    reject(response.text);\n                    alertInlineMessage('danger', 'Server Error ' + response.status, [response.text]);\n                    disableSpinner();\n                }\n            } catch (error) {\n                // JS Error thrown\n                reject(error);\n                alertInlineMessage('danger', 'Exception', [error]);\n                disableSpinner();\n            }\n        }\n\n        // Setup and send\n        xhr.open(method, url, true);\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        xhr.send(data);\n    });\n}\n\n/**\n * GET XHR Promise Request\n * @param {string} url  Resource URL\n * @param {object} data Object with query string parameters as key: values\n */\nconst getXHRPromise = function(url, data) {\n\n    // Create query string if a data object was provided\n    if (data) {\n        let queryString = new URLSearchParams();\n        for (let [key, value] of Object.entries(data)) {\n            queryString.append(key, value);\n        }\n        url += \"?\" + queryString.toString();\n    }\n\n    return XHRPromise(\"GET\", url);\n}\n\n/**\n * POST XHR Promise Request\n * @param {string} url  Resource URL\n * @param {object} data Object with key: values, or FormData instance\n */\nconst postXHRPromise = function(url, data) {\n    let formData;\n    if (data instanceof FormData) {\n        formData = data;\n    } else {\n        formData = new FormData();\n        for (let [key, value] of Object.entries(data)) {\n            formData.append(key, value);\n        }\n    }\n\n    formData.append(pitonConfig.csrfTokenName, pitonConfig.csrfTokenValue);\n\n    return XHRPromise(\"POST\", url,  formData);\n}\n\nexport { getXHRPromise, postXHRPromise };\n","// --------------------------------------------------------\n// Navigation\n// --------------------------------------------------------\nimport './modules/main.js';\nimport { enableSpinner, disableSpinner } from './modules/spinner.js';\nimport { dragStartHandler, dragEnterHandler, dragOverHandler, dragLeaveHandler, dragEndHandler, getMovedElement } from './modules/drag.js';\nimport { postXHRPromise } from './modules/xhrPromise.js';\nimport { alertInlineMessage } from './modules/alert.js';\n\nconst navItems = [];\nconst navPages = document.querySelectorAll(`[data-add-nav=\"page\"] input`);\nconst navCollections = document.querySelectorAll(`[data-add-nav=\"collection\"] input`);\nconst navPlaceholder = document.querySelectorAll(`[data-add-nav=\"placeholder\"] input`);\nconst navElement = document.querySelector(`[data-navigation=\"spare\"] > div`);\nconst navContainer = document.querySelector(`[data-navigation-container=\"1\"]`);\nlet elementKey = 0;\n\n/**\n * Append Navigation Elements\n */\nconst appendNavElements = function() {\n    navItems.forEach(nav => {\n        // Clone spare navigation element, and set unique name array key so POST array keeps inputs together\n        let newNav = navElement.cloneNode(true);\n        let arrayKey = (elementKey++) + \"n\";\n        newNav.querySelectorAll(`input[name^=nav]`).forEach(input => {\n            input.name = input.name.replace(/(.+?\\[)(\\].+)/, \"$1\" + arrayKey + \"$2\");\n        });\n        newNav.dataset.navId = arrayKey;\n\n        // Set data\n        if (nav.pageId) {\n            newNav.querySelector(`input[name$=\"\\[pageId\\]\"]`).value = nav.pageId;\n            newNav.querySelector(`[data-nav=\"title\"]`).innerHTML = nav.pageTitle;\n            newNav.querySelector(`[data-nav=\"type\"]`).innerHTML = \"page\";\n            newNav.querySelector(`[data-nav=\"pageTitle\"]`).innerHTML = nav.pageTitle;\n            newNav.querySelector(`[data-nav=\"pageTitle\"]`).parentElement.classList.remove(\"d-none\");\n\n        } else if (nav.navTitle) {\n            newNav.querySelector(`[data-nav=\"title\"]`).innerHTML = nav.navTitle;\n            newNav.querySelector(`[data-nav=\"type\"]`).innerHTML = \"placeholder\";\n            newNav.querySelector(`input[name$=\"\\[navTitle\\]\"]`).value = nav.navTitle;\n            newNav.querySelector(`input[name$=\"\\[url\\]\"]`).value = nav.url;\n            newNav.querySelector(`input[name$=\"\\[url\\]\"]`).parentElement.classList.remove(\"d-none\");\n\n        } else if (nav.collectionId) {\n            newNav.querySelector(`input[name$=\"\\[collectionId\\]\"]`).value = nav.collectionId;\n            newNav.querySelector(`[data-nav=\"title\"]`).innerHTML = nav.collectionTitle;\n            newNav.querySelector(`[data-nav=\"type\"]`).innerHTML = \"collection\";\n            newNav.querySelector(`[data-nav=\"collectionTitle\"]`).innerHTML = nav.collectionTitle;\n            newNav.querySelector(`[data-nav=\"collectionTitle\"]`).parentElement.classList.remove(\"d-none\");\n\n        }\n\n        navContainer.appendChild(newNav);\n        newNav.dispatchEvent(new Event(\"input\", {\"bubbles\": true}));\n    });\n\n    // Reset\n    navItems.length = 0;\n}\n\n/**\n * Add Page Navigation\n */\nconst addPageNav = function() {\n    navPages.forEach(element => {\n        if (element.checked) {\n            let navItem = {\n                \"pageId\": element.dataset.pageId,\n                \"pageTitle\": element.dataset.pageTitle\n            }\n\n            element.checked = false;\n            navItems.push(navItem);\n        }\n\n    });\n\n    appendNavElements();\n}\n\n/**\n * Add Collection Navigation\n */\nconst addCollectionNav = function() {\n    navCollections.forEach(element => {\n        if (element.checked) {\n            let navItem = {\n                \"collectionId\": element.dataset.collectionId,\n                \"collectionTitle\": element.dataset.collectionTitle\n            }\n\n            element.checked = false;\n            navItems.push(navItem);\n        }\n\n    });\n\n    appendNavElements();\n}\n\n/**\n * Add Placeholder Navigation\n */\nconst addPlaceholderNav = function() {\n    if (navPlaceholder[0].value) {\n        let navItem = {\n            \"navTitle\": navPlaceholder[0].value,\n            \"url\": navPlaceholder[1].value\n        }\n\n        navPlaceholder[0].value = \"\";\n        navPlaceholder[1].value = \"\";\n        navItems.push(navItem);\n    }\n\n    appendNavElements();\n}\n\n/**\n * Insert Child Drop Zone\n */\n\n/**\n * OVERRIDE Drag Drop Handler\n * Overrides drag.js to support child navigation drops\n * @param {Event} event\n */\nconst dragDropHandler = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    let movedElement = getMovedElement();\n\n    // Nothing to do if dropping on self\n    if (movedElement !== event.target && event.target.matches(\".drag-drop\")) {\n        let movedElementParentId = movedElement.querySelector(`input[name$=\"\\[parentId\\]\"]`).value;\n        let newParent = event.target.parentElement.closest(`[data-navigation=\"parent\"]`);\n\n        // If the element parentId matches the current parent ID (element sorted within current level), just drop in new order\n        if (movedElementParentId === newParent.dataset.navId) {\n            event.target.parentElement.insertBefore(movedElement, event.target.nextSibling);\n        }\n\n        // If the element parentId and does not match the new  parent ID, move to last child of new parent\n        if (movedElementParentId !== newParent.dataset.navId) {\n            movedElement.querySelector(`input[name$=\"\\[parentId\\]\"]`).value = newParent.dataset.navId;\n\n            // Add / remove class\n            if (newParent.dataset.navId === \"\") {\n                movedElement.classList.remove(\"sub-toggle-block\");\n            } else {\n                movedElement.classList.add(\"sub-toggle-block\");\n            }\n\n            event.target.parentElement.insertBefore(movedElement, event.target.nextSibling);\n        }\n    }\n}\n\nconst deleteNavItem = function(event) {\n    if (!event.target.dataset.deleteNavigationPrompt) return;\n    if (!confirm(event.target.dataset.deleteNavigationPrompt)) return;\n\n     // Get nav element and create array of IDs to delete\n     let navIds = [];\n     let navElement = event.target.closest(`[data-navigation=\"parent\"]`);\n\n     // Get this ID and all currently assigned child navigation ID's. Some may have been previously saved before being added to this nav parent\n     navElement.querySelectorAll(`input[name$=\"\\[navId\\]\"]`).forEach((i) => {\n        let id = parseInt(i.value);\n        if (!isNaN(id)) {\n            navIds.push(id);\n        }\n     });\n\n     if (navIds.length > 0) {\n        // Delete any navs that had been saved\n        enableSpinner();\n        let data = JSON.stringify(navIds);\n\n        postXHRPromise(pitonConfig.routes.adminNavigationDelete, {\"navIds\": data})\n            .then(() => {\n                // This removes the current nav item along with any children\n                navElement.remove();\n            })\n            .catch((text) => {\n                console.log(\"Failed to delete navigation: \", text);\n            });\n\n        // Reset\n        navIds.length = 0;\n     } else {\n        // This removes the current nav item along with any children\n        navElement.remove();\n     }\n\n}\n\n// Bind events\ndocument.querySelector(`[data-add-nav=\"pageButton\"]`).addEventListener(\"click\", addPageNav, false);\ndocument.querySelector(`[data-add-nav=\"collectionButton\"]`).addEventListener(\"click\", addCollectionNav, false);\ndocument.querySelector(`[data-add-nav=\"placeholderButton\"]`).addEventListener(\"click\", addPlaceholderNav, false);\ndocument.addEventListener(\"click\", deleteNavItem, false);\n\n// Draggable navigation elements\ndocument.querySelectorAll(`[data-draggable=\"children\"]`).forEach(zone => {\n    zone.addEventListener(\"dragstart\", dragStartHandler, false);\n    zone.addEventListener(\"dragenter\", dragEnterHandler, false);\n    zone.addEventListener(\"dragover\", dragOverHandler, false);\n    zone.addEventListener(\"dragleave\", dragLeaveHandler, false);\n    zone.addEventListener(\"drop\", dragDropHandler, false);\n    zone.addEventListener(\"dragend\", dragEndHandler, false);\n});\n\n// Prevent nav source from triggering form control enable\ndocument.querySelectorAll(`[data-add-nav=\"page\"], [data-add-nav=\"collection\"], [data-add-nav=\"placeholder\"]`).forEach(element => {\n    element.addEventListener(\"input\", (event) => {\n        event.stopPropagation();\n    });\n});"]}