{"version":3,"sources":["modules/formControl.js","modules/alert.js","modules/collapse.js","modules/main.js","navigation.js"],"names":["enableFormControl","control","disabled","disableFormControl","dismissAlertInlineMessage","event","target","dataset","dismiss","closest","remove","alertInlineMessage","severity","heading","message","container","document","createElement","innerHTML","pitonConfig","alertInlineHTML","querySelector","classList","add","join","insertAdjacentHTML","window","scrollTo","collapseToggle","collapse","collapseTarget","toggle","querySelectorAll","forEach","form","saveButtons","addEventListener","i","e","confirm","preventDefault","deletePrompt"],"mappings":";AAgBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,mBAAA,QAAA,uBAAA,EAXA,IAAMA,EAAoB,SAASC,GAC3BA,GAAWA,EAAQC,WACnBD,EAAQC,UAAW,IAS3B,QAAA,kBAAA,EAAA,IAAMC,EAAsB,SAASF,GAC7BA,IAAYA,EAAQC,WACpBD,EAAQC,UAAW,IAF3B,QAAA,mBAAA;;ACAA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,0BAAA,QAAA,wBAAA,EAZA,IAAME,EAA4B,SAASC,GACF,UAAjCA,EAAMC,OAAOC,QAAQC,SACrBH,EAAMC,OAAOG,QAAoCC,4BAAAA,UAUzD,QAAA,0BAAA,EAAA,IAAMC,EAAqB,SAASC,EAAUC,EAASC,GAE/CC,IAAAA,EAAYC,SAASC,cAAc,OACvCF,EAAUG,UAAYC,YAAYC,gBAClCL,EAAUM,cAA0CC,4BAAAA,UAAUC,IAAI,SAAWX,GAC7EG,EAAUM,cAAwCH,0BAAAA,UAAYL,EAGvC,WAAnB,EAAOC,KACPA,EAAUA,EAAQU,KAAK,SAE3BT,EAAUM,cAAwCH,0BAAAA,UAAYJ,EAG1CE,SAASK,cAAc,qBAC7BI,mBAAmB,aAAcV,EAAUG,WACzDQ,OAAOC,SAAS,EAAE,IAhBtB,QAAA,mBAAA;;ACZA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EAAA,IAAMC,EAAiB,SAASvB,GACxBA,GAAkC,WAAlCA,EAAMC,OAAOC,QAAQsB,SAAuB,CACxCC,IAAAA,EAAiBzB,EAAMC,OAAOG,QAAoCY,4BAAAA,cAAtE,4BAEIS,GACAA,EAAeR,UAAUS,OAAO,eAL5C,QAAA,eAAA;;ACuCA,aAvCA,IAAA,EAAA,QAAA,oBACA,EAAA,QAAA,cACA,EAAA,QAAA,iBAGAf,SAASgB,iBAAiB,QAAQC,QAAQ,SAAAC,GAElCC,IAAAA,EAAcD,EAAKF,iBAAvB,6BACIG,IACAA,EAAYF,QAAQ,SAAAhC,IACGA,EAAAA,EAAAA,oBAAAA,KAIvBiC,EAAKE,iBAAiB,QAAS,SAACC,GAC5BF,EAAYF,QAAQ,SAAAhC,IACEA,EAAAA,EAAAA,mBAAAA,QAM9BiC,EAAKF,iBAAgDC,+BAAAA,QAAQ,SAAAhC,GACzDA,EAAQmC,iBAAiB,QAAS,SAACE,GACZC,QAAQ,kEACRD,EAAEE,qBAK7BN,EAAKF,iBAAyCC,wBAAAA,QAAQ,SAAAhC,GAClDA,EAAQmC,iBAAiB,QAAS,SAACE,GAC1BC,QAAQD,EAAEhC,OAAOC,QAAQkC,eAAeH,EAAEE,uBAM3DxB,SAASoB,iBAAiB,QAAShC,EAAnC,2BACAY,SAASoB,iBAAiB,QAASR,EAAnC;;ACxCA,aAAA,QAAA","file":"navigation.js","sourceRoot":"..","sourcesContent":["/**\n * Enable Form Control\n *\n * @param {object} control Control button element\n */\nconst enableFormControl = function(control) {\n    if (control && control.disabled) {\n        control.disabled = false;\n    }\n}\n\n/**\n * Disable Form Control\n *\n * @param {object} control Control button element\n */\nconst disableFormControl =  function(control) {\n    if (control && !control.disabled) {\n        control.disabled = true;\n    }\n}\n\nexport { enableFormControl, disableFormControl };","/**\n * Dismiss Inline Alert\n * @param {Event} event\n */\nconst dismissAlertInlineMessage = function(event) {\n    if (event.target.dataset.dismiss === \"alert\") {\n        event.target.closest(`[data-alert=\"container\"]`).remove();\n    }\n}\n\n/**\n * Display Inline HTML Message Alert\n * @param {string} severity Severity color code\n * @param {string} heading  Message heading\n * @param {mixed} message   Message list\n */\nconst alertInlineMessage = function(severity, heading, message) {\n    // Create element and insert alert HTML and update with alert data\n    let container = document.createElement(\"div\");\n    container.innerHTML = pitonConfig.alertInlineHTML;\n    container.querySelector(`[data-alert=\"container\"]`).classList.add(\"alert-\" + severity);\n    container.querySelector(`[data-alert=\"heading\"]`).innerHTML = heading;\n\n    // Stringify message\n    if (typeof message === 'object') {\n        message = message.join(\"<br>\");\n    }\n    container.querySelector(`[data-alert=\"content\"]`).innerHTML = message;\n\n    // Insert into main or body\n    let mainContainer = document.querySelector(\"main.main-content\");\n    mainContainer.insertAdjacentHTML('afterbegin', container.innerHTML);\n    window.scrollTo(0,0);\n}\n\nexport { alertInlineMessage, dismissAlertInlineMessage };","/**\n * Collapse Toggle\n * @param {Event} event\n */\nconst collapseToggle = function(event) {\n    if (event.target.dataset.collapse === 'toggle') {\n        let collapseTarget = event.target.closest(`[data-collapse=\"parent\"]`).querySelector(`[data-collapse=\"target\"]`);\n\n        if (collapseTarget) {\n            collapseTarget.classList.toggle(\"collapsed\");\n        }\n    }\n}\n\nexport { collapseToggle };","// --------------------------------------------------------\n// Main JS\n// --------------------------------------------------------\n\nimport { enableFormControl, disableFormControl } from './formControl.js';\nimport { dismissAlertInlineMessage } from './alert.js';\nimport { collapseToggle } from './collapse.js';\n\n// Form Control Events\ndocument.querySelectorAll(\"form\").forEach(form => {\n    // Disable form controls and listen for form input changes to re-enable save controls\n    let saveButtons = form.querySelectorAll(`[data-form-button=\"save\"]`);\n    if (saveButtons) {\n        saveButtons.forEach(control => {\n            disableFormControl(control);\n        });\n\n        // Listen for form changes to reenable controls\n        form.addEventListener(\"input\", (i) => {\n            saveButtons.forEach(control => {\n                enableFormControl(control);\n            });\n        });\n    }\n\n    // Confirm discard of changes\n    form.querySelectorAll(`[data-form-button=\"cancel\"]`).forEach(control => {\n        control.addEventListener(\"click\", (e) => {\n            let userResponse = confirm(\"Click Ok to discard your changes, or cancel continue editing?\");\n            if (!userResponse) e.preventDefault();\n        });\n    });\n\n    // Confirm delete\n    form.querySelectorAll(`[data-delete-prompt]`).forEach(control => {\n        control.addEventListener(\"click\", (e) => {\n            if (!confirm(e.target.dataset.deletePrompt)) e.preventDefault();\n        });\n    });\n});\n\n// Binding click events to document\ndocument.addEventListener(\"click\", dismissAlertInlineMessage);\ndocument.addEventListener(\"click\", collapseToggle);","// --------------------------------------------------------\n// Navigation management\n// --------------------------------------------------------\nimport './modules/main.js';\n\n/*\n// Listen for form input changes to update save button status\nlet navSaveIndFlag = false;\nconst setNavSaveIndicator = () => {\n  if (!navSaveIndFlag) {\n    $('#jsSaveNavButton').attr('disabled', false);\n    navSaveIndFlag = true;\n  }\n};\n$('.jsNavigatorForm').on('input', function() {\n  setNavSaveIndicator();\n});\n\n// Add page select nav item\nlet navItemKey = 0;\n$('.jsEditNavBlock').on('click', '.jsAddNavItem', function() {\n  // Find parent UL to get parent values\n  let level = $(this).closest('.jsNavParent').data('level');\n  let parentId = $(this).closest('.jsNavParent').data('parentId');\n\n  // Clone spare page select and set new values\n  let $new = $('#jsPageSelect > li').clone();\n  let arrayKey = (navItemKey++) + \"n\";\n  $new.children('.jsNavParent').data('parentId', arrayKey).data('level', (level + 1));\n  $new.find('input.jsNavParentId').val(parentId);\n  $new.find('[name^=nav]').each(function (i, e) {\n    let name = $(e).attr('name');\n    $(e).attr('name', name.replace(/(.+?\\[)(\\].+)/, \"$1\" + arrayKey + \"$2\"));\n  });\n  // Remove add sub nav option if level 2 or greater\n  if (level >= 1) {\n    $new.children('.jsNavParent').remove();\n  }\n  $(this).parent('li').before($new);\n  setNavSaveIndicator();\n});\n\n// Set or unset delete flag\n$('.jsEditNavBlock').on('click', '.jsNavDelete', function() {\n  let $navItem = $(this).closest('li.jsNavItem');\n  // Get current status and reverse\n  if ($navItem.find('.jsNavDeleteFlag:first').val() === \"\") {\n    $navItem.find('.jsNavDeleteFlag:first').val(\"on\");\n    $navItem.addClass('bg-danger text-white');\n  } else {\n    $navItem.find('.jsNavDeleteFlag:first').val(\"\");\n    $navItem.removeClass('bg-danger text-white');\n  }\n  setNavSaveIndicator();\n});\n\n// Set or unset active flag\n$('.jsEditNavBlock').on('click', '.jsNavActive', function() {\n  let $navItem = $(this).closest('li.jsNavItem');\n\n  // Get current status and reverse\n  if ($navItem.find('.jsNavActiveFlag:first').val() === \"Y\") {\n    $navItem.find('.jsNavActiveFlag:first').val(\"N\");\n    $navItem.addClass('bg-warning text-white');\n  } else {\n    $navItem.find('.jsNavActiveFlag:first').val(\"Y\");\n    $navItem.removeClass('navigation-disabled bg-warning text-white');\n  }\n  setNavSaveIndicator();\n});\n\n// Make alt link text input required if dropdown\n$('.jsEditNavBlock').on('change', '.jsNavPageSelector', function() {\n  if ($(this).val() === '0') {\n    $(this).siblings('.jsNavTitleInput').find('input').prop('required', true);\n  } else {\n    $(this).siblings('.jsNavTitleInput').find('input').prop('required', false);\n  }\n});\n*/"]}