{"version":3,"sources":["modules/formControl.js","modules/alert.js","modules/collapse.js","modules/main.js","modules/spinner.js","modules/xhrPromise.js","modules/modal.js","modules/mediaModal.js","modules/url.js","modules/drag.js","pageEdit.js"],"names":["enableFormControl","control","disabled","disableFormControl","alertContainer","document","querySelector","dismissAlertInlineMessage","event","target","dataset","dismiss","closest","remove","alertInlineMessage","severity","heading","message","container","createElement","innerHTML","pitonConfig","alertInlineHTML","classList","add","join","insertAdjacentHTML","window","scrollTo","collapseToggle","collapse","collapseTarget","toggle","querySelectorAll","forEach","form","saveButtons","addEventListener","e","confirm","preventDefault","deletePrompt","enableSpinner","contains","disableSpinner","XHRPromise","method","url","data","xhr","XMLHttpRequest","Promise","resolve","reject","response","onreadystatechange","readyState","DONE","status","JSON","parse","responseText","text","error","open","setRequestHeader","send","getXHRPromise","queryString","URLSearchParams","Object","entries","key","value","append","toString","postXHRPromise","formData","FormData","csrfTokenName","csrfTokenValue","modal","getElementById","getModal","showModal","showModalContent","header","body","hideModal","inputEvent","Event","openMediaModal","elementTarget","routes","adminMediaGet","then","mediaId","mediaCaption","mediaPath","targetInput","targetImg","id","src","filename","alt","caption","title","dispatchEvent","mediaSelect","mediaModal","mediaClear","pageSlug","setCleanSlug","urlSlugStatus","replace","unlockSlug","readOnly","alert","movedElement","dropZone","getMovedElement","dragStartHandler","dataTransfer","setData","dropEffect","setTimeout","element","nextElementSibling","parentElement","insertBefore","cloneNode","lastElementChild","appendChild","dragEnterHandler","stopPropagation","matches","dragOverHandler","dragLeaveHandler","dragDropHandler","nextSibling","dragEndHandler","zone","setElementTitleText","initMarkdownEditor","SimpleMDE","forceSync","promptURLs","toolbar","addEl","limit","parseInt","elementCountLimit","count","elementCount","query","blockKey","adminPageElementGet","targetBlock","newEditor","windowTarget","getAttribute","catch","pageEditNode","deleteElementPrompt","elementId","isNaN","adminPageElementDelete","console","log","elementEnableInput","elementParent","requiredOption","option","elementInputOption","editor"],"mappings":"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","file":"pageEdit.js","sourceRoot":"..","sourcesContent":["/**\n * Enable Form Control\n *\n * @param {object} control Control button element\n */\nconst enableFormControl = function(control) {\n    if (control && control.disabled) {\n        control.disabled = false;\n    }\n}\n\n/**\n * Disable Form Control\n *\n * @param {object} control Control button element\n */\nconst disableFormControl =  function(control) {\n    if (control && !control.disabled) {\n        control.disabled = true;\n    }\n}\n\nexport { enableFormControl, disableFormControl };","\nconst alertContainer = document.querySelector(`[data-alert-modal=\"1\"]`);\n\n/**\n * Dismiss Inline Alert\n * @param {Event} event\n */\nconst dismissAlertInlineMessage = function(event) {\n    if (event.target.dataset.dismiss === \"alert\") {\n        event.target.closest(`[data-alert=\"container\"]`).remove();\n    }\n}\n\n/**\n * Display Inline HTML Message Alert\n * @param {string} severity Severity color code\n * @param {string} heading  Message heading\n * @param {mixed} message   Message list\n */\nconst alertInlineMessage = function(severity, heading, message) {\n    // Create element and insert alert HTML and update with alert data\n    let container = document.createElement(\"div\");\n    container.innerHTML = pitonConfig.alertInlineHTML;\n    container.querySelector(`[data-alert=\"container\"]`).classList.add(\"alert-\" + severity);\n    container.querySelector(`[data-alert=\"heading\"]`).innerHTML = heading;\n\n    // Stringify message\n    if (typeof message === 'object') {\n        message = message.join(\"<br>\");\n    } else if (typeof message === 'undefined') {\n        message = \"\";\n    }\n\n    container.querySelector(`[data-alert=\"content\"]`).innerHTML = message;\n\n    // Insert into modal-alert container\n    alertContainer.insertAdjacentHTML('afterbegin', container.innerHTML);\n    window.scrollTo(0,0);\n}\n\nexport { alertInlineMessage, dismissAlertInlineMessage };","/**\n * Collapse Toggle\n * @param {Event} event\n */\nconst collapseToggle = function(event) {\n    if (event.target.dataset.collapse === 'toggle') {\n        let collapseTarget = event.target.closest(`[data-collapse=\"parent\"]`).querySelector(`[data-collapse=\"target\"]`);\n\n        if (collapseTarget) {\n            collapseTarget.classList.toggle(\"collapsed\");\n        }\n    }\n}\n\nexport { collapseToggle };","// --------------------------------------------------------\n// Main JS\n// --------------------------------------------------------\n\nimport { enableFormControl, disableFormControl } from './formControl.js';\nimport { dismissAlertInlineMessage } from './alert.js';\nimport { collapseToggle } from './collapse.js';\n\n// Form Control Events\ndocument.querySelectorAll(\"form\").forEach(form => {\n    // Disable form controls and listen for form input changes to re-enable save controls\n    let saveButtons = form.querySelectorAll(`[data-form-button=\"save\"]`);\n    if (saveButtons) {\n        saveButtons.forEach(control => {\n            disableFormControl(control);\n        });\n\n        // Listen for form changes to reenable controls\n        form.addEventListener(\"input\", (e) => {\n            saveButtons.forEach(control => {\n                enableFormControl(control);\n            });\n        }, false);\n    }\n\n    // Confirm discard of changes\n    form.querySelectorAll(`[data-form-button=\"cancel\"]`).forEach(control => {\n        control.addEventListener(\"click\", (e) => {\n            let userResponse = confirm(\"Click Ok to discard your changes, or cancel continue editing?\");\n            if (!userResponse) e.preventDefault();\n        }, false);\n    });\n\n    // Confirm delete\n    form.querySelectorAll(`[data-delete-prompt]`).forEach(control => {\n        control.addEventListener(\"click\", (e) => {\n            if (!confirm(e.target.dataset.deletePrompt)) e.preventDefault();\n        }, false);\n    });\n});\n\n// Binding click events to document\ndocument.addEventListener(\"click\", dismissAlertInlineMessage, false);\ndocument.addEventListener(\"click\", collapseToggle, false);","/**\n * Enable Spinner Overlay\n * @param {void}\n */\nconst enableSpinner = function() {\n    if (document.querySelector(\"body > .spinner\").classList.contains(\"d-none\")) {\n        document.querySelector(\"body > .spinner\").classList.remove(\"d-none\")\n    }\n}\n\n/**\n * Disable Spinner Overlay\n * @param {void}\n */\nconst disableSpinner = function() {\n    if (!document.querySelector(\"body > .spinner\").classList.contains(\"d-none\")) {\n        document.querySelector(\"body > .spinner\").classList.add(\"d-none\")\n    }\n}\n\nexport { enableSpinner, disableSpinner };","import { alertInlineMessage } from './alert.js';\nimport { disableSpinner } from './spinner.js';\n\n/**\n * XHR Request Promise\n * @param {string} method \"GET\"|\"POST\"\n * @param {string} url    Resource request URL\n * @param {FormData} data   FormData payload to send\n */\nconst XHRPromise = function(method, url, data) {\n    let xhr = new XMLHttpRequest();\n\n    return new Promise((resolve, reject) => {\n\n        let response;\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState !== XMLHttpRequest.DONE) return;\n\n            try {\n                if (xhr.status === 200) {\n                    // Successful server response\n                    response = JSON.parse(xhr.responseText);\n\n                    if (response.status === \"success\") {\n                        // Response successful, resolve\n                        resolve(response.text);\n                        disableSpinner();\n                    } else {\n                        // Response successful but application failed, reject and alert\n                        reject();\n                        alertInlineMessage('danger', 'Piton Error', [response.text]);\n                        disableSpinner();\n                    }\n                } else {\n                    // Failed server runtime response\n                    reject(response.text);\n                    alertInlineMessage('danger', 'Server Error ' + response.status, [response.text]);\n                    disableSpinner();\n                }\n            } catch (error) {\n                // JS Error thrown\n                reject(error);\n                alertInlineMessage('danger', 'Exception', [error]);\n                disableSpinner();\n            }\n        }\n\n        // Setup and send\n        xhr.open(method, url, true);\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        xhr.send(data);\n    });\n}\n\n/**\n * GET XHR Promise Request\n * @param {string} url  Resource URL\n * @param {object} data Object with query string parameters as key: values\n */\nconst getXHRPromise = function(url, data) {\n    // Create query string if a data object was provided\n    if (data) {\n        let queryString;\n        if (data instanceof URLSearchParams) {\n            queryString = data;\n        } else {\n            queryString = new URLSearchParams();\n            for (let [key, value] of Object.entries(data)) {\n                queryString.append(key, value);\n            }\n        }\n\n        url += \"?\" + queryString.toString();\n    }\n\n    return XHRPromise(\"GET\", url);\n}\n\n/**\n * POST XHR Promise Request\n * @param {string} url  Resource URL\n * @param {object} data Object with key: values, or FormData instance\n */\nconst postXHRPromise = function(url, data) {\n    let formData;\n    if (data instanceof FormData) {\n        formData = data;\n    } else {\n        formData = new FormData();\n        for (let [key, value] of Object.entries(data)) {\n            formData.append(key, value);\n        }\n    }\n\n    formData.append(pitonConfig.csrfTokenName, pitonConfig.csrfTokenValue);\n\n    return XHRPromise(\"POST\", url,  formData);\n}\n\nexport { getXHRPromise, postXHRPromise };\n","// Get base modal HTML available in all pages\nconst modal = document.getElementById(\"modal\");\n\n/**\n * Get Modal\n * Returns modal object\n */\nconst getModal = function() {\n    return modal;\n}\n\n/**\n * Show Modal (Background)\n * Call first if request requires processing time before content is available\n */\nconst showModal = function() {\n    modal.classList.remove(\"d-none\");\n}\n\n/**\n * Load Modal Content and Display\n * @param {string} header\n * @param {string} body\n */\nconst showModalContent = function(header, body) {\n    // Assign modal header and content\n    modal.querySelector(`[data-modal=\"header\"]`).innerHTML = header;\n    modal.querySelector(`[data-modal=\"body\"]`).innerHTML = body;\n\n    // Remove d-none to display\n    modal.classList.remove(\"d-none\");\n    modal.querySelector(`[data-modal=\"content\"]`).classList.remove(\"d-none\");\n}\n\n/**\n * Hide Modal and Clear Contents\n */\nconst hideModal = function() {\n    modal.classList.add(\"d-none\");\n    modal.querySelector(`[data-modal=\"content\"]`).classList.add(\"d-none\");\n    modal.querySelector(`[data-modal=\"header\"]`).innerHTML = \"\";\n    modal.querySelector(`[data-modal=\"body\"]`).innerHTML = \"\";\n}\n\n// Bind close modal events\nmodal.querySelector(`[data-dismiss=\"modal\"]`).addEventListener(\"click\", () => {\n    hideModal();\n}, false);\n\nwindow.addEventListener(\"click\", (event) => {\n    if (event.target === modal) {\n        hideModal();\n    }\n}, false);\n\nexport { getModal, showModal, showModalContent, hideModal };\n","import { getModal, showModal, showModalContent, hideModal } from './modal.js';\nimport { getXHRPromise } from './xhrPromise.js';\n\n/**\n * Event to dispatch pseudo \"input\" event on hidden inputs\n */\nconst inputEvent = new Event(\"input\", {\"bubbles\": true});\n\n/**\n * Opens Modal with Media Images for Select\n * @param {Element} elementTarget Media target\n */\nconst openMediaModal = function(elementTarget) {\n    showModal();\n    getXHRPromise(pitonConfig.routes.adminMediaGet)\n        .then(data => {\n            showModalContent(\"Select Media\", data);\n        });\n\n    // Add click listener to set media ID on select and dismiss\n    getModal().querySelector(`[data-modal=\"content\"]`).addEventListener(\"click\", (e) => {\n        if (e.target.closest(`[data-media=\"1\"]`)) {\n            // Get media data and set in form\n            let data = {\n                \"id\": e.target.closest(`[data-media=\"1\"]`).dataset.mediaId,\n                \"caption\": e.target.closest(`[data-media=\"1\"]`).dataset.mediaCaption,\n                \"filename\": e.target.closest(`[data-media=\"1\"]`).dataset.mediaPath\n            }\n\n            // Set ID, filename and relative path, an caption in target element\n            let targetInput = elementTarget.querySelector(`input[name*=\"media_id\"]`);\n            let targetImg = elementTarget.querySelector(\"img\");\n\n            targetInput.value = data.id;\n            targetImg.src = data.filename;\n            targetImg.alt = data.caption;\n            targetImg.title = data.caption;\n            targetImg.classList.remove(\"d-none\");\n\n            // Dispatch input event on hidden field\n            targetInput.dispatchEvent(inputEvent);\n\n            hideModal();\n        }\n    }, false);\n}\n\n// Media select modal\nconst mediaSelect = function(event) {\n    if (event && event.target.dataset.mediaModal) {\n        // Launch media modal with target element\n        openMediaModal(event.target.closest(`[data-media-select=\"1\"]`));\n    } else if (event.target.dataset.mediaClear) {\n        // Clear media from form\n        let targetInput = event.target.closest(`[data-media-select=\"1\"]`).querySelector(`input[name*=\"media_id\"]`);\n        let targetImg = event.target.closest(`[data-media-select=\"1\"]`).querySelector(\"img\");\n\n        targetInput.value = \"\";\n        targetImg.src = \"\";\n        targetImg.alt = \"\";\n        targetImg.title = \"\";\n        targetImg.classList.add(\"d-none\");\n\n        // Dispatch event on hidden field\n        targetInput.dispatchEvent(inputEvent);\n    }\n}\n\nexport { mediaSelect };","// --------------------------------------------------------\n// URL JS\n// --------------------------------------------------------\nconst pageSlug = document.querySelector(`[data-url-slug=\"target\"]`);\n\n/**\n * Clean URL Slug\n * @param {string} value\n */\nconst setCleanSlug = function(value) {\n    // Do not change the home page\n    if (pageSlug.value === 'home') return;\n\n    if (pageSlug.dataset.urlSlugStatus === 'unlock') {\n        value = value.replace(/&/g, 'and');\n        value = value.replace(`'`, '');\n        value = value.replace(/[^a-z0-9]+/gi, '-');\n        value = value.replace(/-+$/gi, '');\n\n        pageSlug.value = value;\n    }\n}\n\nconst unlockSlug = function(event) {\n    // Do not change the home page\n    if (pageSlug.value === 'home') {\n        alert(\"You cannot change the home page slug.\");\n        return;\n    };\n\n    const message = 'Are you sure you want to change the URL Slug? This can impact links and search engine results.';\n\n    if (event.target.classList && event.target.classList.contains(\"fa-lock\")) {\n        if (!confirm(message)) return;\n\n        // Continue to unlock and enable input\n        event.target.classList.replace(\"fa-lock\", \"fa-unlock\");\n        pageSlug.readOnly = false;\n        pageSlug.dataset.urlSlugStatus = 'unlock';\n    }\n}\n\nexport { setCleanSlug, unlockSlug };","// Reference to element to be moved\nlet movedElement;\n\n// Event to dispatch pseudo \"input\" event\nconst inputEvent = new Event(\"input\", {\"bubbles\": true});\n\n// Empty drop zone divs to inject in DOM around draggable elements\nconst dropZone = document.createElement(\"div\");\ndropZone.classList.add(\"drag-drop\");\n\n/**\n * Return Moved Element\n */\nconst getMovedElement = function() {\n    return movedElement;\n}\n\n/**\n * Drag Start Handler\n * @param {Event} event\n */\nconst dragStartHandler = function(event) {\n    // Save reference to the element being moved\n    movedElement = event.target;\n\n    event.dataTransfer.setData(\"text/plain\", null);\n    event.dataTransfer.dropEffect = \"move\";\n\n    // Insert drop zone divs around each draggable element\n    // setTimeout() hack: https://stackoverflow.com/a/34698388/452133\n    // To allow DOM manipulation in dragstart\n    setTimeout(() => {\n        document.querySelectorAll(`[draggable=\"true\"]`).forEach(element => {\n            // Insert drop zone before all draggable elements\n            // Except around and inside the movedElement\n            if (element !== movedElement && element !== movedElement.nextElementSibling && !movedElement.contains(element)) {\n                element.parentElement.insertBefore(dropZone.cloneNode(), element);\n            }\n\n            // Insert drop zone after last child\n            if (element === element.parentElement.lastElementChild && element !== movedElement) {\n                element.parentElement.appendChild(dropZone.cloneNode());\n            }\n        });\n\n        // Optional \"other\" drop targets\n        document.querySelectorAll(`[data-drop-zone=\"1\"]`).forEach(element => {\n            // Do not allow movedElement to become child of itself\n            if (!movedElement.contains(element)) {\n                element.parentElement.insertBefore(dropZone.cloneNode(), element);\n            }\n        });\n    }, 0);\n}\n\n/**\n * Drag Enter Handler\n * @param {Event} event\n */\nconst dragEnterHandler = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.dataTransfer.dropEffect = \"move\";\n\n    if (event.target.matches(\".drag-drop\")) {\n        event.target.classList.add(\"drag-hover\");\n    }\n}\n\n/**\n * Drag Over Handler\n * @param {Event} event\n */\nconst dragOverHandler = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.dataTransfer.dropEffect = \"move\";\n}\n\n/**\n * Drag Leave Handler\n * @param {Event} event\n */\nconst dragLeaveHandler = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.dataTransfer.dropEffect = \"move\";\n\n    if (event.target.matches(\".drag-drop\")) {\n        event.target.classList.remove(\"drag-hover\");\n    }\n}\n\n/**\n * Drag Drop Handler\n * @param {Event} event\n */\nconst dragDropHandler = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (movedElement !== event.target && event.target.matches(\".drag-drop\")) {\n        event.target.parentElement.insertBefore(movedElement, event.target.nextSibling)\n    }\n}\n\n/**\n * Drag End Handler\n * @param {Event} event\n */\nconst dragEndHandler = function(event) {\n    // Cleanup drop zones\n    document.querySelectorAll(\".drag-drop\").forEach(zone => {\n        zone.remove();\n    });\n\n    // Initiatve input event\n    movedElement.dispatchEvent(inputEvent);\n}\n\nexport { dragStartHandler, dragEnterHandler, dragOverHandler, dragLeaveHandler, dragDropHandler, dragEndHandler, getMovedElement };","// --------------------------------------------------------\n// Page Edit JS\n// --------------------------------------------------------\n\nimport './modules/main.js';\nimport { enableSpinner, disableSpinner } from './modules/spinner.js';\nimport { getXHRPromise, postXHRPromise } from './modules/xhrPromise.js';\nimport { mediaSelect } from './modules/mediaModal.js';\nimport { setCleanSlug, unlockSlug } from './modules/url.js';\nimport { dragStartHandler, dragEnterHandler, dragOverHandler, dragLeaveHandler, dragDropHandler, dragEndHandler } from './modules/drag.js';\n\n/**\n * Set Element Title\n */\nconst setElementTitleText = function(event) {\n    if (event.target.matches(`input[name^=\"element_title\"]`)) {\n        let title = event.target.value;\n        let elementTitle = event.target.closest(`[data-element=\"parent\"]`).querySelector(\".secondary-title\");\n        elementTitle.innerHTML = title;\n    }\n}\n\n/**\n * Markdown Editor\n * @param {object} element\n */\nconst initMarkdownEditor = function(element) {\n    return new SimpleMDE({\n        element: element,\n        forceSync: true,\n        promptURLs: true,\n        toolbar: [\n          \"bold\", \"italic\", \"|\", \"heading-2\", \"heading-3\", \"|\", \"unordered-list\", \"ordered-list\", \"|\",\n          \"horizontal-rule\", \"table\", \"|\", \"link\",\n        //   {\n        //     name: \"image\",\n        //     // action: getMediaForMDE,\n        //     className: \"fa fa-picture-o\",\n        //     title: \"Media\"\n        //   },\n          \"guide\"\n        ]\n      });\n}\n\n// Add Page Block Element\ndocument.querySelectorAll(`a[data-element=\"add\"]`).forEach(addEl => {\n    addEl.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        let limit = parseInt(addEl.dataset.elementCountLimit) || 100;\n        let count = parseInt(addEl.dataset.elementCount) || 0;\n\n        // Check element limit\n        if (count >= limit) {\n            alert('This Block has the maximum number of Elements allowed by the design');\n            return;\n        }\n\n        // Get new element\n        enableSpinner();\n\n        // Get query string and XHR Promise\n        let query = {\n            \"pageTemplate\": document.querySelector(`input[name=\"template\"]`).value,\n            \"blockKey\": addEl.dataset.blockKey\n        }\n\n        getXHRPromise(pitonConfig.routes.adminPageElementGet, query)\n            .then(response => {\n                let container = document.createElement(\"div\");\n                let targetBlock = document.getElementById(\"block-\" + addEl.dataset.blockKey);\n                container.innerHTML = response;\n\n                // Set element order number and update count in add element data-element-count\n                addEl.dataset.elementCount = ++count;\n\n                container.querySelector(`[data-element=\"parent\"]`).classList.add(\"new-element\");\n                targetBlock.insertAdjacentHTML('beforeend', container.innerHTML);\n\n                // Unable to initalize SimpleMDE on the unattached HTML fragment until we insert it\n                let newEditor = targetBlock.lastElementChild.querySelector(`textarea[data-mde=\"1\"]`);\n                initMarkdownEditor(newEditor);\n\n                // Get new block ID for window scroll\n                let windowTarget = container.querySelector(`[data-element=\"parent\"]`).getAttribute(\"id\");\n\n                return windowTarget;\n            })\n            .then(target => {\n                // TODO Smooth scroll leaving room for navs\n                // window.location.hash = target;\n            })\n            .then(() => {\n                disableSpinner();\n            }).catch(() => {\n                disableSpinner();\n            });\n    }, false);\n});\n\n// Get Page Edit block\nconst pageEditNode = document.querySelector(`[data-page-edit=\"1\"]`);\n\n// Delete element\nif (pageEditNode) {\n    pageEditNode.addEventListener(\"click\", (event) => {\n        if (event.target.dataset.deleteElementPrompt) {\n            // Confirm delete\n            if (!confirm(event.target.dataset.deleteElementPrompt)) return;\n\n            // Get element ID and element\n            let elementId = parseInt(event.target.dataset.elementId);\n            let element = event.target.closest(`[data-element=\"parent\"]`);\n\n            if (isNaN(elementId)) {\n                // Element has not been saved to DB, just remove from DOM\n                element.remove();\n            } else {\n                // Element has been saved, do a hard delete\n                enableSpinner();\n                postXHRPromise(pitonConfig.routes.adminPageElementDelete, {\"elementId\": elementId})\n                    .then(() => {\n                        element.remove();\n                    })\n                    .catch((data) => {\n                        console.log(\"Failed to delete element: \", data);\n                    });\n            }\n        }\n    }, false);\n}\n\n// Enable additional inputs on elements when selected\nif (pageEditNode) {\n    pageEditNode.addEventListener(\"click\", (event) => {\n        if (event.target.dataset.elementEnableInput) {\n            let elementParent = event.target.closest(`[data-element=\"parent\"]`);\n            let requiredOption = event.target.dataset.elementEnableInput;\n\n            // Get special inputs and set visible or hide class\n            elementParent.querySelectorAll(`[data-element-input-option]`).forEach(option => {\n                if (requiredOption === option.dataset.elementInputOption) {\n                    option.classList.remove(\"d-none\");\n                    option.classList.add(\"d-block\");\n                } else {\n                    option.classList.add(\"d-none\");\n                    option.classList.remove(\"d-block\");\n                }\n\n            });\n        }\n    }, false);\n}\n\n// Bind Markdown Editor to selected textareas on page load\nif (pageEditNode) {\n    pageEditNode.querySelectorAll(`textarea[data-mde=\"1\"]`).forEach(editor => {\n        initMarkdownEditor(editor);\n    });\n}\n\n// Bind set page slug from page title\ndocument.querySelector(`[data-url-slug=\"source\"]`).addEventListener(\"input\", (e) => {\n    setCleanSlug(e.target.value);\n}, false);\n\n// Bind warning on unlocking page slug\ndocument.querySelector(`[data-url-slug-lock=\"1\"]`).addEventListener(\"click\", (e) => {\n    unlockSlug(e);\n}, false);\n\n// Bind page edit listeners for events that bubble\ndocument.addEventListener(\"click\", mediaSelect, false);\ndocument.addEventListener(\"change\", setElementTitleText, false);\n\n// Draggable page elements\ndocument.querySelectorAll(`[data-draggable=\"children\"]`).forEach(zone => {\n    zone.addEventListener(\"dragstart\", dragStartHandler, false);\n    zone.addEventListener(\"dragenter\", dragEnterHandler, false);\n    zone.addEventListener(\"dragover\", dragOverHandler, false);\n    zone.addEventListener(\"dragleave\", dragLeaveHandler, false);\n    zone.addEventListener(\"drop\", dragDropHandler, false);\n    zone.addEventListener(\"dragend\", dragEndHandler, false);\n});\n\n/*\n\n// Bind Markdown Editor to Textareas\nlet getMediaForMDE = function (editor) {\n    // Bind media click once, and load media in modal\n    $('#mediaModal').unbind().on('click', 'img', function () {\n      let imgsrc = $(this).data('source');\n      let imgalt = $(this).data('caption');\n      let output = '![' + imgalt + '](' + imgsrc + ') ';\n      editor.codemirror.replaceSelection(output);\n      editor.codemirror.focus();\n\n      $('#mediaModal').modal('hide');\n    });\n\n    $.ajax({\n      url: pitonConfig.routes.adminMediaGet,\n      method: \"GET\",\n      success: function (r) {\n        $('#mediaModal').find('.modal-body').html(r.html).end().modal();\n      }\n    });\n  };\n\n  [].forEach.call(document.getElementsByClassName('jsMDE'), element => {\n    let simplemde = new SimpleMDE({\n      element: element,\n      forceSync: true,\n      promptURLs: true,\n      toolbar: [\n        \"bold\", \"italic\", \"|\", \"heading-2\", \"heading-3\", \"|\", \"unordered-list\", \"ordered-list\", \"|\",\n        \"horizontal-rule\", \"table\", \"|\", \"link\",\n        {\n          name: \"image\",\n          action: getMediaForMDE,\n          className: \"fa fa-picture-o\",\n          title: \"Media\"\n        },\n        \"guide\"\n      ]\n    });\n  });\n\n/* */\n"]}