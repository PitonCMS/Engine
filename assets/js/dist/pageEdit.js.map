{"version":3,"sources":["modules/formControl.js","modules/alert.js","modules/collapse.js","modules/main.js","modules/spinner.js","modules/xhrPromise.js","modules/modal.js","modules/mediaModal.js","pageEdit.js"],"names":["enableFormControl","control","disabled","disableFormControl","dismissAlertInlineMessage","event","target","dataset","dismiss","closest","remove","alertInlineMessage","severity","heading","message","container","document","createElement","innerHTML","pitonConfig","alertInlineHTML","querySelector","classList","add","join","insertAdjacentHTML","window","scrollTo","collapseToggle","collapse","collapseTarget","console","log","toggle","querySelectorAll","forEach","form","saveButtons","addEventListener","i","e","confirm","preventDefault","deletePrompt","enableSpinner","contains","disableSpinner","XHRPromise","method","url","data","xhr","XMLHttpRequest","Promise","resolve","reject","onreadystatechange","readyState","DONE","status","response","JSON","parse","responseText","text","error","open","setRequestHeader","send","getXHRPromise","params","queryString","Object","keys","map","k","encodeURIComponent","postXHRPromise","csrfTokenName","csrfTokenValue","postData","modal","getElementById","getModal","showModal","showModalContent","header","body","buttons","hideModal","openMediaModal","elementTarget","routes","adminMediaGet","then","mediaId","mediaCaption","mediaPath","value","id","src","filename","alt","caption","title","mediaSelect","mediaModal","mediaClear","mediaElement","initMarkdownEditor","element","SimpleMDE","forceSync","promptURLs","toolbar","addEl","limit","parseInt","elementCountLimit","count","elementCount","alert","query","blockKey","adminPageElementGet","targetBlock","setAttribute","newEditor","lastElementChild","windowTarget","getAttribute","catch","pageEditNode","deleteElementPrompt","elementId","isNaN","adminPageElementDelete","elementEnableInput","elementParent","requiredOption","option","elementInputOption","editor"],"mappings":";AAgBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,mBAAA,QAAA,uBAAA,EAXA,IAAMA,EAAoB,SAASC,GAC3BA,GAAWA,EAAQC,WACnBD,EAAQC,UAAW,IAS3B,QAAA,kBAAA,EAAA,IAAMC,EAAsB,SAASF,GAC7BA,IAAYA,EAAQC,WACpBD,EAAQC,UAAW,IAF3B,QAAA,mBAAA;;ACAA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,0BAAA,QAAA,wBAAA,EAZA,IAAME,EAA4B,SAASC,GACF,UAAjCA,EAAMC,OAAOC,QAAQC,SACrBH,EAAMC,OAAOG,QAAoCC,4BAAAA,UAUzD,QAAA,0BAAA,EAAA,IAAMC,EAAqB,SAASC,EAAUC,EAASC,GAE/CC,IAAAA,EAAYC,SAASC,cAAc,OACvCF,EAAUG,UAAYC,YAAYC,gBAClCL,EAAUM,cAA0CC,4BAAAA,UAAUC,IAAI,SAAWX,GAC7EG,EAAUM,cAAwCH,0BAAAA,UAAYL,EAGvC,WAAnB,EAAOC,KACPA,EAAUA,EAAQU,KAAK,SAE3BT,EAAUM,cAAwCH,0BAAAA,UAAYJ,EAG1CE,SAASK,cAAc,qBAC7BI,mBAAmB,aAAcV,EAAUG,WACzDQ,OAAOC,SAAS,EAAE,IAhBtB,QAAA,mBAAA;;ACXA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EAAA,IAAMC,EAAiB,SAASvB,GACxBA,GAAkC,WAAlCA,EAAMC,OAAOC,QAAQsB,SAAuB,CACxCC,IAAAA,EAAiBzB,EAAMC,OAAOG,QAAoCY,4BAAAA,cAAtE,4BAEIS,IACAC,QAAQC,IAAIF,GACZA,EAAeR,UAAUW,OAAO,gBAN5C,QAAA,eAAA;;ACsCA,aAvCA,IAAA,EAAA,QAAA,oBACA,EAAA,QAAA,cACA,EAAA,QAAA,iBAGAjB,SAASkB,iBAAiB,QAAQC,QAAQ,SAAAC,GAElCC,IAAAA,EAAcD,EAAKF,iBAAvB,6BACIG,IACAA,EAAYF,QAAQ,SAAAlC,IACGA,EAAAA,EAAAA,oBAAAA,KAIvBmC,EAAKE,iBAAiB,QAAS,SAACC,GAC5BF,EAAYF,QAAQ,SAAAlC,IACEA,EAAAA,EAAAA,mBAAAA,QAM9BmC,EAAKF,iBAAgDC,+BAAAA,QAAQ,SAAAlC,GACzDA,EAAQqC,iBAAiB,QAAS,SAACE,GACZC,QAAQ,kEACRD,EAAEE,qBAK7BN,EAAKF,iBAAyCC,wBAAAA,QAAQ,SAAAlC,GAClDA,EAAQqC,iBAAiB,QAAS,SAACE,GAC1BC,QAAQD,EAAElC,OAAOC,QAAQoC,eAAeH,EAAEE,uBAM3D1B,SAASsB,iBAAiB,QAASlC,EAAnC,2BACAY,SAASsB,iBAAiB,QAASV,EAAnC;;AC7BA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,QAAA,mBAAA,EAVA,IAAMgB,EAAgB,WACd5B,SAASK,cAAc,mBAAmBC,UAAUuB,SAAS,WAC7D7B,SAASK,cAAc,mBAAmBC,UAAUZ,OAAO,WAQnE,QAAA,cAAA,EAAA,IAAMoC,EAAiB,WACd9B,SAASK,cAAc,mBAAmBC,UAAUuB,SAAS,WAC9D7B,SAASK,cAAc,mBAAmBC,UAAUC,IAAI,WAFhE,QAAA,eAAA;;AC8DA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,QAAA,mBAAA,EA5EA,IAAA,EAAA,QAAA,cACA,EAAA,QAAA,gBA2EA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAnEA,IAAMwB,EAAa,SAASC,EAAQC,EAAKC,GACjCC,IAAAA,EAAM,IAAIC,eAEP,OAAA,IAAIC,QAAQ,SAACC,EAASC,GACzBJ,EAAIK,mBAAqB,WACjBL,GAAAA,EAAIM,aAAeL,eAAeM,KAElC,IACIP,GAAe,MAAfA,EAAIQ,OAAgB,CAEhBC,IAAAA,EAAWC,KAAKC,MAAMX,EAAIY,cACN,YAApBH,EAASD,OAETL,EAAQM,EAASI,MAGjBT,GAAO,EAAmB,EAAA,oBAAA,SAAU,SAAU,CAACK,EAASI,aAI5DT,GAAO,EAAmB,EAAA,oBAAA,SAAU,SAAU,CAACK,SAASI,SACxD,EAAA,EAAA,kBAEN,MAAOC,GACLV,GAAO,EAAmB,EAAA,oBAAA,SAAU,QAAS,CAACU,MAC9C,EAAA,EAAA,oBAKRd,EAAIe,KAAKlB,EAAQC,GAAK,GACtBE,EAAIgB,iBAAiB,eAAgB,qCACrChB,EAAIgB,iBAAiB,mBAAoB,kBACzChB,EAAIiB,KAAKlB,MASXmB,EAAgB,SAASpB,EAAKqB,GAC5BC,IAAAA,EAgBGxB,MAbe,iBAAXuB,EACPC,EAAcD,EACW,WAAlB,EAAOA,KACdC,EAAcC,OAAOC,KAAKH,GAAQI,IAAI,SAACC,GAC5BC,OAAAA,mBAAmBD,GAAK,IAAMC,mBAAmBN,EAAOK,MAChEnD,KAAK,MAIR+C,IACAtB,GAAO,IAAMsB,GAGVxB,EAAW,MAAOE,IAQ7B,QAAA,cAAA,EAAA,IAAM4B,EAAiB,SAAS5B,EAAKC,GAS1BH,OARPG,EAAOA,GAAQ,IACV/B,YAAY2D,eAAiB3D,YAAY4D,eAG9CC,SAAWR,OAAOC,KAAKvB,GAAMwB,IAAI,SAACC,GACvBC,OAAAA,mBAAmBD,GAAK,IAAMC,mBAAmB1B,EAAKyB,MAC9DnD,KAAK,KAEDuB,EAAW,OAAQE,EAAM+B,WATpC,QAAA,eAAA;;AC9BA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,QAAA,iBAAA,QAAA,UAAA,QAAA,cAAA,EA7CA,IAAMC,EAAQjE,SAASkE,eAAe,SAMhCC,EAAW,WACNF,OAAAA,GAsCX,QAAA,SAAA,EA/BA,IAAMG,EAAY,WACdH,EAAM3D,UAAUZ,OAAO,WA8B3B,QAAA,UAAA,EArBA,IAAM2E,EAAmB,SAASC,EAAQC,EAAMC,GAC5CP,EAAM5D,cAAuCH,yBAAAA,UAAYoE,EACzDL,EAAM5D,cAAqCH,uBAAAA,UAAYqE,EACvDN,EAAM3D,UAAUZ,OAAO,UACvBuE,EAAM5D,cAAwCC,0BAAAA,UAAUZ,OAAO,WAiBnE,QAAA,iBAAA,EAXA,IAAM+E,EAAY,WACdR,EAAM3D,UAAUC,IAAI,UACpB0D,EAAM5D,cAAwCC,0BAAAA,UAAUC,IAAI,UAC5D0D,EAAM5D,cAAuCH,yBAAAA,UAAY,GACzD+D,EAAM5D,cAAqCH,uBAAAA,UAAY,IAO3D,QAAA,UAAA,EAHA+D,EAAM5D,cAAwCiB,0BAAAA,iBAAiB,QAAS,WACpEmD,MAEJ/D,OAAOY,iBAAiB,QAAS,SAACjC,GAC1BA,EAAMC,SAAW2E,GACjBQ;;ACXR,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EArCA,IAAA,EAAA,QAAA,cACA,EAAA,QAAA,mBAMMC,EAAiB,SAASC,IAC5B,EAAA,EAAA,cACcxE,EAAAA,EAAAA,eAAAA,YAAYyE,OAAOC,eAC5BC,KAAK,SAAA5C,IACe,EAAA,EAAA,kBAAA,eAAgBA,MAI9B7B,EAAAA,EAAAA,YAAAA,cAAwCiB,0BAAAA,iBAAiB,QAAS,SAACE,GACtEA,GAAAA,EAAElC,OAAOG,QAAb,oBAA0C,CAElCyC,IAAAA,EAAO,CACDV,GAAAA,EAAElC,OAAOG,QAA4BF,oBAAAA,QAAQwF,QACxCvD,QAAAA,EAAElC,OAAOG,QAA4BF,oBAAAA,QAAQyF,aAC5CxD,SAAAA,EAAElC,OAAOG,QAA4BF,oBAAAA,QAAQ0F,WAI7DN,EAActE,cAAyC6E,2BAAAA,MAAQhD,EAAKiD,GACpER,EAActE,cAAc,OAAO+E,IAAMlD,EAAKmD,SAC9CV,EAActE,cAAc,OAAOiF,IAAMpD,EAAKqD,QAC9CZ,EAActE,cAAc,OAAOmF,MAAQtD,EAAKqD,QAChDZ,EAActE,cAAc,OAAOC,UAAUZ,OAAO,WAEpD,EAAA,EAAA,iBAMN+F,EAAc,SAASpG,GACrBA,GAAAA,GAASA,EAAMC,OAAOC,QAAQmG,WAE9BhB,EAAerF,EAAMC,OAAOG,QAAd,iCACX,GAAIJ,EAAMC,OAAOC,QAAQoG,WAAY,CAEpCC,IAAAA,EAAevG,EAAMC,OAAOG,QAAhC,2BACAmG,EAAavF,cAAyC6E,2BAAAA,MAAQ,GAC9DU,EAAavF,cAAc,OAAO+E,IAAM,GACxCQ,EAAavF,cAAc,OAAOiF,IAAM,GACxCM,EAAavF,cAAc,OAAOmF,MAAQ,GAC1CI,EAAavF,cAAc,OAAOC,UAAUC,IAAI,YAXxD,QAAA,YAAA;;ACwHA,aAzJA,QAAA,qBACA,IAAA,EAAA,QAAA,wBACA,EAAA,QAAA,2BACA,EAAA,QAAA,2BAMMsF,EAAqB,SAASC,GACzB,OAAA,IAAIC,UAAU,CACjBD,QAASA,EACTE,WAAW,EACXC,YAAY,EACZC,QAAS,CACP,OAAQ,SAAU,IAAK,YAAa,YAAa,IAAK,iBAAkB,eAAgB,IACxF,kBAAmB,QAAS,IAAK,OAF1B,YAejBlG,SAASkB,iBAA0CC,yBAAAA,QAAQ,SAAAgF,GACvDA,EAAM7E,iBAAiB,QAAS,SAACE,GAC7BA,EAAEE,iBACE0E,IAAAA,EAAQC,SAASF,EAAM5G,QAAQ+G,oBAAsB,IACrDC,EAAQF,SAASF,EAAM5G,QAAQiH,eAAiB,EAGhDD,GAAAA,GAASH,EACTK,MAAM,2EADNF,EAN+B,EAAA,EAAA,iBAe/BG,IAAAA,EAAQ,CACQ1G,aAAAA,SAASK,cAAwC6E,0BAAAA,MACrDiB,SAAAA,EAAM5G,QAAQoH,WAGhBxG,EAAAA,EAAAA,eAAAA,YAAYyE,OAAOgC,oBAAqBF,GACjD5B,KAAK,SAAAlC,GACE7C,IAAAA,EAAYC,SAASC,cAAc,OACnC4G,EAAc7G,SAASkE,eAAe,SAAWiC,EAAM5G,QAAQoH,UACnE5G,EAAUG,UAAY0C,EAGtBuD,EAAM5G,QAAQiH,eAAiBD,EAG/BxG,EAAUM,cAA6CyG,+BAAAA,aAAa,QAASX,EAAM5G,QAAQiH,cAC3FzG,EAAUM,cAAyCC,2BAAAA,UAAUC,IAAI,eACjEsG,EAAYpG,mBAAmB,YAAaV,EAAUG,WAGlD6G,IAAAA,EAAYF,EAAYG,iBAAiB3G,cAA7C,0BAMO4G,OALPpB,EAAmBkB,GAGAhH,EAAUM,cAAyC6G,2BAAAA,aAAa,QAItFpC,KAAK,SAAAxF,MAILwF,KAAK,YACF,EAAA,EAAA,oBACDqC,MAAM,YACL,EAAA,EAAA,yBAMhB,IAAMC,EAAepH,SAASK,cAA9B,wBAGI+G,GACAA,EAAa9F,iBAAiB,QAAS,SAACjC,GAChCA,GAAAA,EAAMC,OAAOC,QAAQ8H,oBAAqB,CAEtC,IAAC5F,QAAQpC,EAAMC,OAAOC,QAAQ8H,qBAAsB,OAGpDC,IAAAA,EAAYjB,SAAShH,EAAMC,OAAOC,QAAQ+H,WAC1CxB,EAAUzG,EAAMC,OAAOG,QAA3B,2BAEI8H,GAAAA,MAAMD,GAENxB,EAAQpG,aACL,EAEH,EAAA,EAAA,iBACIwC,IAAAA,EAAO,CACMoF,UAAAA,IAGFnH,EAAAA,EAAAA,gBAAAA,YAAYyE,OAAO4C,uBAAwBtF,GACrD4C,KAAK,WACFgB,EAAQpG,WAEXoF,KAAK,YACF,EAAA,EAAA,wBAQpBsC,GACAA,EAAa9F,iBAAiB,QAAS,SAACjC,GAChCA,GAAAA,EAAMC,OAAOC,QAAQkI,mBAAoB,CACrCC,IAAAA,EAAgBrI,EAAMC,OAAOG,QAAjC,2BACIkI,EAAiBtI,EAAMC,OAAOC,QAAQkI,mBAG1CC,EAAcxG,iBAAgDC,+BAAAA,QAAQ,SAAAyG,GAC9DD,IAAmBC,EAAOrI,QAAQsI,oBAClCD,EAAOtH,UAAUZ,OAAO,UACxBkI,EAAOtH,UAAUC,IAAI,aAErBqH,EAAOtH,UAAUC,IAAI,UACrBqH,EAAOtH,UAAUZ,OAAO,iBASxC0H,GACAA,EAAalG,iBAA2CC,0BAAAA,QAAQ,SAAA2G,GAC5DjC,EAAmBiC,KAK3B9H,SAASsB,iBAAiB,QAASmE,EAAnC","file":"pageEdit.js","sourceRoot":"..","sourcesContent":["/**\n * Enable Form Control\n *\n * @param {object} control Control button element\n */\nconst enableFormControl = function(control) {\n    if (control && control.disabled) {\n        control.disabled = false;\n    }\n}\n\n/**\n * Disable Form Control\n *\n * @param {object} control Control button element\n */\nconst disableFormControl =  function(control) {\n    if (control && !control.disabled) {\n        control.disabled = true;\n    }\n}\n\nexport { enableFormControl, disableFormControl };","/**\n * Dismiss Inline Alert\n * @param {Event} event\n */\nconst dismissAlertInlineMessage = function(event) {\n    if (event.target.dataset.dismiss === \"alert\") {\n        event.target.closest(`[data-alert=\"container\"]`).remove();\n    }\n}\n\n/**\n * Display Inline HTML Message Alert\n * @param {string} severity Severity color code\n * @param {string} heading  Message heading\n * @param {mixed} message   Message list\n */\nconst alertInlineMessage = function(severity, heading, message) {\n    // Create element and insert alert HTML and update with alert data\n    let container = document.createElement(\"div\");\n    container.innerHTML = pitonConfig.alertInlineHTML;\n    container.querySelector(`[data-alert=\"container\"]`).classList.add(\"alert-\" + severity);\n    container.querySelector(`[data-alert=\"heading\"]`).innerHTML = heading;\n\n    // Stringify message\n    if (typeof message === 'object') {\n        message = message.join(\"<br>\");\n    }\n    container.querySelector(`[data-alert=\"content\"]`).innerHTML = message;\n\n    // Insert into main or body\n    let mainContainer = document.querySelector(\"main.main-content\");\n    mainContainer.insertAdjacentHTML('afterbegin', container.innerHTML);\n    window.scrollTo(0,0);\n}\n\nexport { alertInlineMessage, dismissAlertInlineMessage };","\n/**\n * Collapse Toggle\n * @param {Event} event\n */\nconst collapseToggle = function(event) {\n    if (event.target.dataset.collapse === 'toggle') {\n        let collapseTarget = event.target.closest(`[data-collapse=\"parent\"]`).querySelector(`[data-collapse=\"target\"]`);\n\n        if (collapseTarget) {\n            console.log(collapseTarget)\n            collapseTarget.classList.toggle(\"collapsed\");\n        }\n    }\n}\n\nexport { collapseToggle };","// --------------------------------------------------------\n// Main JS\n// --------------------------------------------------------\n\nimport { enableFormControl, disableFormControl } from './formControl.js';\nimport { dismissAlertInlineMessage } from './alert.js';\nimport { collapseToggle } from './collapse.js';\n\n// Form Control Events\ndocument.querySelectorAll(\"form\").forEach(form => {\n    // Disable form controls and listen for form input changes to re-enable save controls\n    let saveButtons = form.querySelectorAll(`[data-form-button=\"save\"]`);\n    if (saveButtons) {\n        saveButtons.forEach(control => {\n            disableFormControl(control);\n        });\n\n        // Listen for form changes to reenable controls\n        form.addEventListener(\"input\", (i) => {\n            saveButtons.forEach(control => {\n                enableFormControl(control);\n            });\n        });\n    }\n\n    // Confirm discard of changes\n    form.querySelectorAll(`[data-form-button=\"cancel\"]`).forEach(control => {\n        control.addEventListener(\"click\", (e) => {\n            let userResponse = confirm(\"Click Ok to discard your changes, or cancel continue editing?\");\n            if (!userResponse) e.preventDefault();\n        });\n    });\n\n    // Confirm delete\n    form.querySelectorAll(`[data-delete-prompt]`).forEach(control => {\n        control.addEventListener(\"click\", (e) => {\n            if (!confirm(e.target.dataset.deletePrompt)) e.preventDefault();\n        });\n    });\n});\n\n// Binding click events to document\ndocument.addEventListener(\"click\", dismissAlertInlineMessage);\ndocument.addEventListener(\"click\", collapseToggle);","/**\n * Enable Spinner Overlay\n * @param {void}\n */\nconst enableSpinner = function() {\n    if (document.querySelector(\"body > .spinner\").classList.contains(\"d-none\")) {\n        document.querySelector(\"body > .spinner\").classList.remove(\"d-none\")\n    }\n}\n\n/**\n * Disable Spinner Overlay\n * @param {void}\n */\nconst disableSpinner = function() {\n    if (!document.querySelector(\"body > .spinner\").classList.contains(\"d-none\")) {\n        document.querySelector(\"body > .spinner\").classList.add(\"d-none\")\n    }\n}\n\nexport { enableSpinner, disableSpinner };","import { alertInlineMessage } from './alert.js';\nimport { disableSpinner } from './spinner.js';\n\n/**\n * XHR Request Promise\n * @param {string} method \"GET\"|\"POST\"\n * @param {string} url    Resource request URL\n * @param {mixed}  data   String or object\n */\nconst XHRPromise = function(method, url, data) {\n    let xhr = new XMLHttpRequest();\n\n    return new Promise((resolve, reject) => {\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState !== XMLHttpRequest.DONE) return;\n\n            try {\n                if (xhr.status === 200) {\n                    // Successful server response\n                    let response = JSON.parse(xhr.responseText);\n                    if (response.status === \"success\") {\n                        // Response content successful\n                        resolve(response.text);\n                    } else {\n                        // Response successful but application failed\n                        reject(alertInlineMessage('danger', 'Failed', [response.text]));\n                    }\n                } else {\n                    // Failed server runtime response\n                    reject(alertInlineMessage('danger', 'Failed', [response.text]));\n                    disableSpinner();\n                }\n            } catch (error) {\n                reject(alertInlineMessage('danger', 'Error', [error]));\n                disableSpinner();\n            }\n        }\n\n        // Setup and send\n        xhr.open(method, url, true);\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        xhr.send(data);\n    });\n}\n\n/**\n * GET XHR Promise Request\n * @param {string} url    Resource URL\n * @param {string} params Query string parameters\n */\nconst getXHRPromise = function(url, params) {\n    let queryString;\n\n    // Accept query string or build from object\n    if (typeof params === 'string') {\n        queryString = params;\n    } else if (typeof params === 'object') {\n        queryString = Object.keys(params).map((k) => {\n            return encodeURIComponent(k) + '=' + encodeURIComponent(params[k])\n        }).join('&');\n    }\n\n    // Attach query string to URL\n    if (queryString) {\n        url += '?' + queryString;\n    }\n\n    return XHRPromise(\"GET\", url);\n}\n\n/**\n * POST XHR Promise Request\n * @param {string} url  Resource URL\n * @param {string} data FormData object or object key value pairs\n */\nconst postXHRPromise = function(url, data) {\n    data = data || {};\n    data[pitonConfig.csrfTokenName] = pitonConfig.csrfTokenValue\n\n    // Serialize data\n    postData = Object.keys(data).map((k) => {\n        return encodeURIComponent(k) + '=' + encodeURIComponent(data[k])\n    }).join('&');\n\n    return XHRPromise(\"POST\", url,  postData);\n}\n\nexport { getXHRPromise, postXHRPromise };\n","// Get base modal HTML available in all pages\nconst modal = document.getElementById(\"modal\");\n\n/**\n * Get Modal\n * Returns modal object\n */\nconst getModal = function() {\n    return modal;\n}\n\n/**\n * Show Modal (Background)\n * Call first if request requires processing before content is available\n */\nconst showModal = function() {\n    modal.classList.remove(\"d-none\");\n}\n\n/**\n * Load Modal Content and Display\n * @param {string} header\n * @param {string} body\n * @param {object} buttons\n */\nconst showModalContent = function(header, body, buttons) {\n    modal.querySelector(`[data-modal=\"header\"]`).innerHTML = header;\n    modal.querySelector(`[data-modal=\"body\"]`).innerHTML = body;\n    modal.classList.remove(\"d-none\");\n    modal.querySelector(`[data-modal=\"content\"]`).classList.remove(\"d-none\");\n}\n\n/**\n * Hide Modal and Clear Contents\n */\nconst hideModal = function() {\n    modal.classList.add(\"d-none\");\n    modal.querySelector(`[data-modal=\"content\"]`).classList.add(\"d-none\");\n    modal.querySelector(`[data-modal=\"header\"]`).innerHTML = \"\";\n    modal.querySelector(`[data-modal=\"body\"]`).innerHTML = \"\";\n}\n\n// Bind close modal events\nmodal.querySelector(`[data-dismiss=\"modal\"]`).addEventListener(\"click\", () => {\n    hideModal();\n});\nwindow.addEventListener(\"click\", (event) => {\n    if (event.target === modal) {\n        hideModal();\n    }\n});\n\nexport { getModal, showModal, showModalContent, hideModal };\n","import { getModal, showModal, showModalContent, hideModal } from './modal.js';\nimport { getXHRPromise } from './xhrPromise.js';\n\n/**\n * Opens Modal with Media Images for Select\n * @param {Element} elementTarget Media target\n */\nconst openMediaModal = function(elementTarget) {\n    showModal();\n    getXHRPromise(pitonConfig.routes.adminMediaGet)\n        .then(data => {\n            showModalContent(\"Select Media\", data);\n        });\n\n    // Add click listener to set media ID on select and dismiss\n    getModal().querySelector(`[data-modal=\"content\"]`).addEventListener(\"click\", (e) => {\n        if (e.target.closest(`[data-media=\"1\"]`)) {\n            // Get media data and set in form\n            let data = {\n                \"id\": e.target.closest(`[data-media=\"1\"]`).dataset.mediaId,\n                \"caption\": e.target.closest(`[data-media=\"1\"]`).dataset.mediaCaption,\n                \"filename\": e.target.closest(`[data-media=\"1\"]`).dataset.mediaPath\n            }\n\n            // Set ID, filename and relative path, an caption in target element\n            elementTarget.querySelector(`input[name*=\"media_id\"]`).value = data.id;\n            elementTarget.querySelector(\"img\").src = data.filename;\n            elementTarget.querySelector(\"img\").alt = data.caption;\n            elementTarget.querySelector(\"img\").title = data.caption;\n            elementTarget.querySelector(\"img\").classList.remove(\"d-none\");\n\n            hideModal();\n        }\n    });\n}\n\n// Media select modal\nconst mediaSelect = function(event) {\n    if (event && event.target.dataset.mediaModal) {\n        // Launch media modal with target element\n        openMediaModal(event.target.closest(`[data-media-select=\"1\"]`));\n    } else if (event.target.dataset.mediaClear) {\n        // Clear media from form\n        let mediaElement = event.target.closest(`[data-media-select=\"1\"]`);\n        mediaElement.querySelector(`input[name*=\"media_id\"]`).value = \"\";\n        mediaElement.querySelector(\"img\").src = \"\";\n        mediaElement.querySelector(\"img\").alt = \"\";\n        mediaElement.querySelector(\"img\").title = \"\";\n        mediaElement.querySelector(\"img\").classList.add(\"d-none\");\n    }\n}\n\nexport { mediaSelect };","// --------------------------------------------------------\n// Page Edit JS\n// --------------------------------------------------------\n\nimport './modules/main.js';\nimport { enableSpinner, disableSpinner } from './modules/spinner.js';\nimport { getXHRPromise, postXHRPromise } from './modules/xhrPromise.js';\nimport { mediaSelect } from './modules/mediaModal.js';\n\n/**\n * Markdown Editor\n * @param {object} element\n */\nconst initMarkdownEditor = function(element) {\n    return new SimpleMDE({\n        element: element,\n        forceSync: true,\n        promptURLs: true,\n        toolbar: [\n          \"bold\", \"italic\", \"|\", \"heading-2\", \"heading-3\", \"|\", \"unordered-list\", \"ordered-list\", \"|\",\n          \"horizontal-rule\", \"table\", \"|\", \"link\",\n        //   {\n        //     name: \"image\",\n        //     // action: getMediaForMDE,\n        //     className: \"fa fa-picture-o\",\n        //     title: \"Media\"\n        //   },\n          \"guide\"\n        ]\n      });\n}\n\n// Add Page Block Element\ndocument.querySelectorAll(`a[data-element=\"add\"]`).forEach(addEl => {\n    addEl.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        let limit = parseInt(addEl.dataset.elementCountLimit) || 100;\n        let count = parseInt(addEl.dataset.elementCount) || 0;\n\n        // Check element limit\n        if (count >= limit) {\n            alert('This Block has the maximum number of Elements allowed by the design');\n            return;\n        }\n\n        // Get new element\n        enableSpinner();\n\n        // Get query string and XHR Promise\n        let query = {\n            \"pageTemplate\": document.querySelector(`input[name=\"template\"]`).value,\n            \"blockKey\": addEl.dataset.blockKey\n        }\n\n        getXHRPromise(pitonConfig.routes.adminPageElementGet, query)\n            .then(response => {\n                let container = document.createElement(\"div\");\n                let targetBlock = document.getElementById(\"block-\" + addEl.dataset.blockKey);\n                container.innerHTML = response;\n\n                // Set element order number and update count in add element\n                addEl.dataset.elementCount = ++count;\n\n                // Setting .value = addEl.dataset.elementCount in this fragment updates the DOM, but not the HTML\n                container.querySelector(`input[name^=\"element_sort\"]`).setAttribute('value', addEl.dataset.elementCount);\n                container.querySelector(`[data-element=\"parent\"]`).classList.add(\"new-element\");\n                targetBlock.insertAdjacentHTML('beforeend', container.innerHTML);\n\n                // Unable to initalize SimpleMDE on the unattached HTML fragment until we insert it\n                let newEditor = targetBlock.lastElementChild.querySelector(`textarea[data-mde=\"1\"]`);\n                initMarkdownEditor(newEditor);\n\n                // Get new block ID for window scroll\n                let windowTarget = container.querySelector(`[data-element=\"parent\"]`).getAttribute(\"id\");\n\n                return windowTarget;\n            })\n            .then(target => {\n                // TODO Smooth scroll leaving room for navs\n                // window.location.hash = target;\n            })\n            .then(() => {\n                disableSpinner();\n            }).catch(() => {\n                disableSpinner();\n            });\n    });\n});\n\n// Get Page Edit block\nconst pageEditNode = document.querySelector(`[data-page-edit=\"1\"]`);\n\n// Delete element\nif (pageEditNode) {\n    pageEditNode.addEventListener(\"click\", (event) => {\n        if (event.target.dataset.deleteElementPrompt) {\n            // Confirm delete\n            if (!confirm(event.target.dataset.deleteElementPrompt)) return;\n\n            // Get element ID and element\n            let elementId = parseInt(event.target.dataset.elementId);\n            let element = event.target.closest(`[data-element=\"parent\"]`);\n\n            if (isNaN(elementId)) {\n                // Element has not been saved to DB, just remove from DOM\n                element.remove();\n            } else {\n                // Element has been saved, do a hard delete\n                enableSpinner();\n                let data = {\n                    \"elementId\": elementId\n                }\n\n                postXHRPromise(pitonConfig.routes.adminPageElementDelete, data)\n                    .then(() => {\n                        element.remove();\n                    })\n                    .then(() => {\n                        disableSpinner();\n                    });\n            }\n        }\n    });\n}\n\n// Enable additional inputs on elements when selected\nif (pageEditNode) {\n    pageEditNode.addEventListener(\"click\", (event) => {\n        if (event.target.dataset.elementEnableInput) {\n            let elementParent = event.target.closest(`[data-element=\"parent\"]`);\n            let requiredOption = event.target.dataset.elementEnableInput;\n\n            // Get special inputs and set visible or hide class\n            elementParent.querySelectorAll(`[data-element-input-option]`).forEach(option => {\n                if (requiredOption === option.dataset.elementInputOption) {\n                    option.classList.remove(\"d-none\");\n                    option.classList.add(\"d-block\");\n                } else {\n                    option.classList.add(\"d-none\");\n                    option.classList.remove(\"d-block\");\n                }\n\n            });\n        }\n    });\n}\n\n// Bind Markdown Editor to selected textareas on page load\nif (pageEditNode) {\n    pageEditNode.querySelectorAll(`textarea[data-mde=\"1\"]`).forEach(editor => {\n        initMarkdownEditor(editor);\n    });\n}\n\n// Load media select modal\ndocument.addEventListener(\"click\", mediaSelect);\n\n/*\n// Clean Page URL slug from title\nlet $pageSlug = $('.jsUrlSlug');\n$('.jsPageTitle').on('change', function () {\n    if ($pageSlug.val() === 'home') return;\n    if (pitonConfig.pageSlugLocked !== 'lock') {\n    let slug = this.value;\n        slug = slug.replace(/&/g, 'and');\n        slug = slug.replace(`'`, '');\n        slug = slug.toLowerCase();\n        slug = slug.replace(/[^a-z0-9]+/gi, '-');\n        slug = slug.replace(/-+$/gi, '');\n        $pageSlug.val(slug);\n    }\n});\n\n// Unlock Page URL slug on request\n$('.jsUrlSlugFaLockStatus').on('click', function () {\n    // Ignore if home page\n    if ($pageSlug.val() === 'home') return;\n    if (pitonConfig.pageSlugLocked === 'lock' && confirmPrompt('Are you sure you want to change the URL Slug? This can impact links and search engines.')) {\n        pitonConfig.pageSlugLocked = 'unlock';\n        $pageSlug.attr('readonly', false);\n        $(this).find('i.fas').toggleClass('fa-lock fa-unlock');\n    }\n});\n\n// Bind Markdown Editor to Textareas\nlet getMediaForMDE = function (editor) {\n    // Bind media click once, and load media in modal\n    $('#mediaModal').unbind().on('click', 'img', function () {\n      let imgsrc = $(this).data('source');\n      let imgalt = $(this).data('caption');\n      let output = '![' + imgalt + '](' + imgsrc + ') ';\n      editor.codemirror.replaceSelection(output);\n      editor.codemirror.focus();\n\n      $('#mediaModal').modal('hide');\n    });\n\n    $.ajax({\n      url: pitonConfig.routes.adminMediaGet,\n      method: \"GET\",\n      success: function (r) {\n        $('#mediaModal').find('.modal-body').html(r.html).end().modal();\n      }\n    });\n  };\n\n  [].forEach.call(document.getElementsByClassName('jsMDE'), element => {\n    let simplemde = new SimpleMDE({\n      element: element,\n      forceSync: true,\n      promptURLs: true,\n      toolbar: [\n        \"bold\", \"italic\", \"|\", \"heading-2\", \"heading-3\", \"|\", \"unordered-list\", \"ordered-list\", \"|\",\n        \"horizontal-rule\", \"table\", \"|\", \"link\",\n        {\n          name: \"image\",\n          action: getMediaForMDE,\n          className: \"fa fa-picture-o\",\n          title: \"Media\"\n        },\n        \"guide\"\n      ]\n    });\n  });\n\n/* */\n"]}